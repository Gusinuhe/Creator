// Load all global variables from the jenkins-shared-library for Unity
// see https://github.com/burnedikt/jenkins-shared-library-unity for source
@Library('jenkins-shared-library-unity@v1.0') _

pipeline
{
    agent
    {
        label 'unity-ng'
    }
    
    parameters 
    {
        string(name: 'UNITY_VERSION', defaultValue: '2018.4.14f1', description: 'The Unity Version to build for')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'If set to true, the test will be skipped')
        booleanParam(name: 'BUILD_UNITYPACKAGE', defaultValue: true, description: 'If set to true, a unity package containing the SDK will be created and attached as artifact.')
        booleanParam(name: 'BUILD_DOCUMENTATION', defaultValue: false, description: 'If set to true, the Hub documentation will be built and attached as artifact.')        
    }

    options
    {
        disableConcurrentBuilds()
        skipDefaultCheckout true
    }

    environment
    {
        // Path to the module within the Unity project.
        MODULE_DIRECTORY_IN_ASSETS = "${EXTENSION_PATH}\\Hub-Training-Module"
        // Path to the file with shared methods.
        SHARED = "${WORKSPACE}\\.JenkinsFile-Shared"
        // Path to U3D rules
        // U3D commands need to use a dedicated set of rules for logging to get more verbose output from e.g. Common.Logging,
        // see more at https://github.com/DragonBox/u3d/blob/master/LOG_RULES.md
        U3D_RULES_PATH = "z:\\u3d_log_rules.json"
        // Unity project base path
        PROJECT_PATH = "z:\\${BUILD_TAG}"
        // Path where the SDK should be checked out to
        EXTENSION_PATH = "${PROJECT_PATH}\\Assets\\Extensions"
        // Path to export config file.
        EXPORT_CONFIG = "z:\\.export-config"
    }

    stages
    {
        stage('Setup')
        {
            steps
            {
                powershell "git config --system core.longpaths true"
                checkout scm

                script
                {
                    load(SHARED).InitialSetup()
                }
            }
        }

        stage('Initialization')
        {
            steps
            {
                script
                {
                    load(SHARED).InitialTrainingSetup()
                    load(SHARED).SetupUnity()
                    load(SHARED).CopyTrainingModule(MODULE_DIRECTORY_IN_ASSETS)
                }
            }
        }

        stage('Build Unity 2018+') 
        {
            when { expression { params.UNITY_VERSION !=~ /2017.*/ } }
            steps
            {
                script
                {
                    load(SHARED).Build()
                }
            }
        }
        
        stage('Test')
        {
            when { expression { params.SKIP_TESTS == false } }
            steps
            {
                script
                {
                    load(SHARED).Test()
                }
            }
        }

        stage('Documentation')
        {
            when
            {
                anyOf 
                {
                    tag pattern: "v(\\d+\\.\\d+\\.\\d+)", comparator: "REGEXP"
                    expression { params.BUILD_DOCUMENTATION == true }
                }
            }
            stages
            {
                stage ('Source Documentation Theme Files')
                {
                    steps
                    {
                        dir("${env.EXTENSION_PATH}\\Hub-Training-Module\\.Documentation\\theme")
                        {
                            stash name: 'docfx-theme-raw', includes: "**"
                        }
                    }
                }
                stage ('Build Public Documentation Theme')
                {
                    agent
                    {
                        docker
                        {
                            image 'node:lts-slim'
                        }
                    }
                    steps
                    {
                        unstash name: 'docfx-theme-raw'
                        sh """
                        npm install
                        npm run build
                        """
                        stash name: 'docfx-theme', includes: 'dist/**'
                    }
                }
                stage ('Build Documentation')
                {
                    steps
                    {
                        dir("${env.EXTENSION_PATH}\\Hub-Training-Module\\.Documentation\\theme")
                        {
                            // Pop the built documentation theme
                            unstash name: 'docfx-theme'
                        }
                        script
                        {
                            load(SHARED).Documentation()
                        }
                    }
                }
                stage('Deploy Documentation')
                {
                    when
                    {
                        tag pattern: "v(\\d+\\.\\d+\\.\\d+)", comparator: "REGEXP"
                    }
                    steps
                    {
                        script
                        {
                            load(SHARED).DeployDocumentation()
                        }
                    }
                }
            }
        }

        stage('Export Unity Package')
        {
            when
            {
                anyOf 
                {
                    tag pattern: "v(\\d+\\.\\d+\\.\\d+)", comparator: "REGEXP"
                    expression { params.BUILD_UNITYPACKAGE == true }
                }
            }
            steps
            {
                script
                {
                    writeFile file: "${EXPORT_CONFIG}", text: $/
                    {
                        "AssetDirectory" : "Assets/Extensions/Hub-Training-Module",
                        "Version" : "${env.TAG_NAME}",
                        "OutputPath" : "./Builds/innoactive-creator-${env.TAG_NAME}.unitypackage",
                        "Excludes" : [
                            "*/Tests/*",
                            "*/VRTK/Examples/*",
                            "*/LegacyExampleFiles/*"
                        ]
                    }
                    /$
                }
                script
                {
                    load(SHARED).CreateUnityPackage(EXPORT_CONFIG)
                }
            }
        }
    }

    post
    {
        always
        {
            archiveArtifacts allowEmptyArchive: true, artifacts: "${BUILD_TAG}/*.log"
        }

        cleanup
        {
            dir("${BUILD_TAG}")
            {
                // Publish the results of the test
                nunit testResultsPattern: "TestResults*.xml", failIfNoResults: false
            }

            powershell """

            Remove-Item .\\Hub-Training-Module -Force -Recurse -ErrorAction SilentlyContinue
            Remove-Item .\\${BUILD_TAG} -Force -Recurse -ErrorAction SilentlyContinue

            subst z: /D
            exit(0)
            """
        }
    }
}
