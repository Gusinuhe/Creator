<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Innoactive.Hub.Communication</name>
    </assembly>
    <members>
        <member name="T:Innoactive.Hub.SDK.AsyncHttpTask`1">
            <inheritdoc cref="T:Innoactive.Hub.SDK.AsyncTask`1" />
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncHttpTask`1.WhenAll(Innoactive.Hub.SDK.IAsyncHttpTask{`0}[])">
            <summary>
            Helper method that will return a task that only finished when all provided tasks have finished and 
            will yield their results in the end
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTask">
            <inheritdoc />
            <summary>
            Asynchronous task providing an interface that allows to register handlers for the finished task.
            This task does not provide any results when finished, if you need results, please <seealso cref="T:Innoactive.Hub.SDK.IAsyncTask`1" />
            (<see cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnFinished(System.Action{`0})" />) as well as it's progress updates (<see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})" />) and
            errors (<see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnError(System.Action{System.Exception})" />
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.ProgressUpdate">
            <inheritdoc />
            <summary>
            Event emitted whenever the progress of the task changes
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.Started">
            <inheritdoc />
            <summary>
            Event emitted when this task has been started
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.Finished">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.FinishedWithResult">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.Errored">
            <inheritdoc />
            <summary>
            Event emitted when this task has errored
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask.Aborted">
            <inheritdoc />
            <summary>
            Event emitted when this task has errored
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.Result">
            <inheritdoc />
            <summary>
            The task's typed result (only available after the task has successfully run).
            Please rather use <see cref="M:Innoactive.Hub.SDK.AsyncTask.OnFinished(System.Action)"/> or <seealso cref="E:Innoactive.Hub.SDK.AsyncTask.FinishedWithResult"/> to access the result!
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.Progress">
            <inheritdoc />
            <summary>
            The task's current progress (ranges from 0 to 1)
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.IsErrored">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.IsAborted">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.TaskDelegate">
            <inheritdoc />
            <summary>
            The actual workload that the task will performed
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.Status">
            <summary>
            The task's current status
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.Action">
            <summary>
            The actual workload that the task will performed
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask.TaskDelegateHandle">
            <summary>
            A handle to the task's delegate. Can be used to dispose the task's delegate
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.#ctor">
            <summary>
            Default constructor, takes care of initializing handler (finished, progress, error) lists
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.#ctor(System.Func{Innoactive.Hub.SDK.IAsyncTask,System.IDisposable})">
            <inheritdoc />
            <summary>
            Public constructor expecting the task's delegate (the actual operation)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.OnFinished(System.Action)">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed as soon as the task has finished.
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.OnFinished(System.Action{System.Object})">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTask.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.OnError(System.Action{System.Exception})">
            <inheritdoc />
            <summary>
            Registers an error handler for any errors occurring during task execution
            </summary>
            <param name="onError"></param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.OnProgress(System.Action{System.Single})">
            <inheritdoc />
            <summary>
            Registers a progress handler for progress updates during task execution
            </summary>
            <param name="onProgress"></param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.Execute">
            <inheritdoc />
            <summary>
            Actually runs the delegate and returns its result (an IDisposable object)
            that is to be disposed only after the OnFinished or OnError callback has
            been executed
            </summary>
            <returns>the result of the Task's delegate</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.Abort">
            <inheritdoc />
            <summary>
            Abort this task's operation
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.InvokeOnFinished">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished" /> event
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.MarkAsFinished">
            <summary>
            Marks the task as Finished and sets the progress to 100%.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.InvokeOnFinished(System.Object)">
            <inheritdoc />
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTask.FinishedWithResult"/> event
            </summary>
            <param name="result">the result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.SetResult(System.Object)">
            <summary>
            Sets the outcome / result of this task.
            </summary>
            <param name="result">the result of the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.InvokeOnError(System.Exception)">
            <inheritdoc />
            <summary>
            Marks this task as errored and notifies all listeners (<seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Errored" />) of the provided exception that happened during task execution
            </summary>
            <param name="error">the exception that occurred while running the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.InvokeOnProgress(System.Single)">
            <inheritdoc />
            <summary>
            Updates the task's progress and notifies any listeners (<seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate" />) of changed progress on the async task
            </summary>
            <param name="progress">the progress (0...1)</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.AbortTask">
            <summary>
            Actually takes care of aborting the running task by e.g. disposing the task's handle
            Can be overridden in subclasses to allow different logic
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.SetStarted">
            <summary>
            Marks this task as started and invokes the <see cref="E:Innoactive.Hub.SDK.AsyncTask.Started"/> event
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.HasValidDelegate">
            <summary>
            Whether or not the Task's delegate is valid or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask.WhenAll(Innoactive.Hub.SDK.IAsyncTask[])">
            <summary>
            Helper method that will return a task that only finished when all provided tasks have finished and
            will yield their results in the end
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTask`1">
            <inheritdoc cref="T:Innoactive.Hub.SDK.AsyncTask" />
            <summary>
            Asynchronous task providing an interface to register handlers for the final result of the async task
            (<see cref="M:Innoactive.Hub.SDK.AsyncTask`1.OnFinished(System.Action{`0})" />) as well as it's progress updates (<see cref="M:Innoactive.Hub.SDK.AsyncTask`1.OnProgress(System.Action{System.Single})" />) and
            errors (<see cref="M:Innoactive.Hub.SDK.AsyncTask`1.OnError(System.Action{System.Exception})" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTask`1.FinishedWithResult">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask`1.Result">
            <inheritdoc />
            <summary>
            The task's typed result (only available after the task has successfully run).
            Please rather use <see cref="M:Innoactive.Hub.SDK.AsyncTask`1.OnFinished(System.Action{`0})"/> or <seealso cref="E:Innoactive.Hub.SDK.AsyncTask`1.FinishedWithResult"/> to access the result!
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTask`1.Action">
            <summary>
            The actual workload that the task will perform
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.#ctor">
            <inheritdoc />
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.#ctor(System.Func{Innoactive.Hub.SDK.IAsyncTask{`0},System.IDisposable})">
            <inheritdoc />
            <summary>
            Public constructor expecting the task's delegate (the actual operation)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.OnFinished(System.Action{`0})">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTask`1.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.OnError(System.Action{System.Exception})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed when an error occurs while executing the task.
            </summary>
            <param name="onError">the callback action to be run upon an exception in the task</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.OnProgress(System.Action{System.Single})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed whenever the progress (0...1) of the task execution changes.
            Can be used e.g. to visualize the progress as a loading bar
            </summary>
            <param name="onProgress">the callback action to be run upon progress updates</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.InvokeOnFinished(`0)">
            <inheritdoc />
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTask`1.FinishedWithResult"/> event
            </summary>
            <param name="results">the typed result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.SetResult(`0)">
            <summary>
            Sets the (generic) outcome / result of this task.
            </summary>
            <param name="result">the result of the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.Abort">
            <inheritdoc />
            <summary>
            Abort this task's operation
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.AsIAsyncTask``1(System.Func{`0,``0})">
            <inheritdoc />
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="taskResultConversionFunction">The function used to convert the result of type <typeparamref name="T"/> to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.WhenAll(Innoactive.Hub.SDK.IAsyncTask{`0}[])">
            <summary>
            Helper method that will return a task that only finished when all provided tasks have finished and
            will yield their results in the end
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTask`1.ConvertTaskResultType``1(Innoactive.Hub.SDK.IAsyncTask{`0},System.Func{`0,``0})">
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="originalTask">the task for which to convert the result type</param>
            <param name="taskResultConversionFunction">The function used to convert the result of type <typeparamref name="T"/> to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskCollection">
            <inheritdoc cref="T:Innoactive.Hub.SDK.AsyncTask" />
            <summary>
            A collection of asynchronous tasks that will run in parallel and will invoke <seealso cref="M:Innoactive.Hub.SDK.IAsyncTask.OnFinished(System.Action)" /> / <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished"/> as soon as all
            tasks of the collection have finished or <seealso cref="M:Innoactive.Hub.SDK.IAsyncTask.OnError(System.Action{System.Exception})" /> / <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Errored"/> if one of the tasks fails.
            Also, <seealso cref="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})"/> / <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate"/> are used to notify any listeners of progress
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTaskCollection.FinishedWithResult">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTaskCollection.Result">
            <inheritdoc />
            <summary>
            The task's typed result (only available after the task has successfully run).
            Please rather use <see cref="M:Innoactive.Hub.SDK.AsyncTaskCollection.OnFinished(System.Action{System.Object[]})"/> or <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection.FinishedWithResult"/> to access the result!
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.#ctor">
            <inheritdoc />
            <summary>
            Default constructor allows to add tasks later on to the collection
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.#ctor(Innoactive.Hub.SDK.IAsyncTask[])">
            <inheritdoc />
            <summary>
            Initialize a new task collection with a given array of tasks
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.OnFinished(System.Action{System.Object[]})">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.OnError(System.Action{System.Exception})">
            <inheritdoc />
            <summary>
            Registers an error handler for any errors occuring during task execution
            </summary>
            <param name="onError"></param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.OnProgress(System.Action{System.Single})">
            <inheritdoc />
            <summary>
            Registers a progress handler for progress updates during task execution
            </summary>
            <param name="onProgress"></param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.InvokeOnFinished(System.Object[])">
            <inheritdoc />
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection.FinishedWithResult"/> event
            </summary>
            <param name="results">the result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.AsIAsyncTask``1(System.Func{System.Object[],``0})">
            <inheritdoc />
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="taskResultConversionFunction">The function used to convert the result of type object[] to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.InvokeOnFinished">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished" /> event
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.Execute">
            <inheritdoc />
            <summary>
            Starts executing all tasks of the collection (in parallel)
            </summary>
            <returns>the disposable that can be used to dispose the entire collection of tasks</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.FinalizeTaskCollection">
            <summary>
            Called when all tasks have been finished, use this to notify anyone of the finished list of tasks and providing the correct list of results
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.AbortTask">
            <inheritdoc />
            <summary>
            Actually takes care of aborting the running task by e.g. disposing the task's handle
            Can be overridden in subclasses to allow different logic
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.AsyncTaskCollection.Tasks">
            <summary>
            collection of all asynchronous tasks that are to be executed in parallel
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.Add(Innoactive.Hub.SDK.IAsyncTask)">
            <summary>
            Adds a task to the collection
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection.Remove(Innoactive.Hub.SDK.IAsyncTask)">
            <summary>
            Removes the specified task from the collection
            </summary>
            <param name="task"></param>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTaskCollection.Count">
            <summary>
            Number of tasks in this collection.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskCollection`1">
            <inheritdoc cref="T:Innoactive.Hub.SDK.IAsyncTask`1" />
            <summary>
            A collection of asynchronous tasks that will run in parallel and will invoke <seealso cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnFinished(System.Action{`0})" /> as soon as all
            tasks of the collection have finished or <seealso cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnError(System.Action{System.Exception})" /> if one of the tasks fails.
            </summary>
            <typeparam name="T">The type of result each single task of the collection will yield.</typeparam>
            <remarks>All tasks of this collection must be of type <seealso cref="T:Innoactive.Hub.SDK.IAsyncTask`1"/> and use the same type parameter <typeparamref name="T"/></remarks>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTaskCollection`1.FinishedWithResult">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTaskCollection`1.Result">
            <inheritdoc />
            <summary>
            The task's typed result (only available after the task has successfully run).
            Please rather use <see cref="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.OnFinished(System.Action{`0[]})"/> or <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection`1.FinishedWithResult"/> to access the result!
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.#ctor">
            <inheritdoc />
            <summary>
            Default constructor allows to add tasks later on to the collection
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.#ctor(Innoactive.Hub.SDK.IAsyncTask{`0}[])">
            <inheritdoc />
            <summary>
            Initialize a new task collection with a given array of tasks
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.OnFinished(System.Action{`0[]})">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection`1.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.OnError(System.Action{System.Exception})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed when an error occurs while executing the task.
            </summary>
            <param name="onError">the callback action to be run upon an exception in the task</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.OnProgress(System.Action{System.Single})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed whenever the progress (0...1) of the task execution changes.
            Can be used e.g. to visualize the progress as a loading bar
            </summary>
            <param name="onProgress">the callback action to be run upon progress updates</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.InvokeOnFinished(`0[])">
            <inheritdoc />
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskCollection`1.FinishedWithResult"/> event
            </summary>
            <param name="results">the typed result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.Add(Innoactive.Hub.SDK.IAsyncTask)">
            <inheritdoc />
            <summary>
            Adds a task to the collection
            </summary>
            <param name="task"></param>
            <remarks>Ensures that the task is of type <seealso cref="T:Innoactive.Hub.SDK.IAsyncTask`1"/></remarks>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.AsIAsyncTask``1(System.Func{`0[],``0})">
            <inheritdoc />
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="taskResultConversionFunction">The function used to convert the result of type <typeparamref name="T"/> to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskCollection`1.FinalizeTaskCollection">
            <inheritdoc />
            <summary>
            Called when all tasks have been finished, use this to notify anyone of the finished list of tasks and providing the correct list of results
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskAbortedEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Aborted" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskStartedEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Started" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskFinishedEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskErrorEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Errored" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskProgressEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskFinishedResultEventArgs`1">
            <inheritdoc />
            <summary>
            Event arguments for IAsyncTask's <see cref="E:Innoactive.Hub.SDK.IAsyncTask`1.FinishedWithResult" />
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskQueue">
            <inheritdoc />
            <summary>
            A queue of asynchronous tasks that will run in sequence and will invoke <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnFinished(System.Action)" /> / <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished"/> as soon as the last task
            in the queue has finished or <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnError(System.Action{System.Exception})" /> / <see cref="E:Innoactive.Hub.SDK.IAsyncTask.Errored"/> if one of the tasks in the queue fails. The queue will also emit
            Progress event (<see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})" /> / <see cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate" /> )during task execution.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue.#ctor">
            <inheritdoc />
            <summary>
            Default constructor allows to enqueue tasks later on
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue.#ctor(Innoactive.Hub.SDK.IAsyncTask[])">
            <inheritdoc />
            <summary>
            Initialize a new task queue with a given array of tasks (in the given order)
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue.Execute">
            <inheritdoc />
            <summary>
            Actually runs the delegate and returns its result (an IDisposable object)
            that is to be disposed only after the OnFinished or OnError callback has
            been executed
            </summary>
            <returns>the result of the Task's delegate</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue.Enqueue(Innoactive.Hub.SDK.IAsyncTask)">
            <summary>
            Enqueues a new task
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue.FinalizeTaskQueue">
            <summary>
            Called when all tasks have been finished, use this to notify anyone of the finished list of tasks and providing the correct list of results
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskQueue`1">
            <inheritdoc cref="T:Innoactive.Hub.SDK.AsyncTaskQueue" />
            <summary>
            Generic version of <seealso cref="T:Innoactive.Hub.SDK.AsyncTaskQueue"/> that will return a list of results from the tasks run as a queue in the handlers attached via <see cref="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.OnFinished(System.Action{`0[]})"/> / <see cref="E:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinishedWithResult"/>.
            Also emits progress updates to the handlers attached via <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})"/> and <see cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate"/>
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinishedWithResult">
            <inheritdoc />
            <summary>
            Event emitted when this task is completed, contains the results of all tasks in the collection
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.AsyncTaskQueue`1.Result">
            <inheritdoc />
            <summary>
            The task's typed result (only available after the task has successfully run).
            Please rather use <see cref="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.OnFinished(System.Action{`0[]})"/> or <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinishedWithResult"/> to access the result!
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.#ctor">
            <inheritdoc />
            <summary>
            Default constructor allows to enqueue tasks later on
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.#ctor(Innoactive.Hub.SDK.IAsyncTask{`0}[])">
            <inheritdoc />
            <summary>
            Initialize a new task queue with a given array of tasks (in the given order)
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.OnFinished(System.Action{`0[]})">
            <inheritdoc />
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon completion of the task collection</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.OnError(System.Action{System.Exception})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed when an error occurs in any of the tasks of the queue
            </summary>
            <param name="onError">the callback action to be run upon an exception in the task</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.OnProgress(System.Action{System.Single})">
            <inheritdoc />
            <summary>
            Registers a new callback to be executed whenever the progress (0...1) of the task execution changes.
            Can be used e.g. to visualize the progress as a loading bar
            </summary>
            <param name="onProgress">the callback action to be run upon progress updates</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.InvokeOnFinished(`0[])">
            <inheritdoc />
            <summary>
            Marks the queue of tasks as finished with the given results and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinishedWithResult"/> event
            </summary>
            <param name="results">the typed result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.Enqueue(Innoactive.Hub.SDK.IAsyncTask)">
            <inheritdoc />
            <summary>
            Enqueues a new task
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.AsIAsyncTask``1(System.Func{`0[],``0})">
            <inheritdoc />
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="taskResultConversionFunction">The function used to convert the result of type <typeparamref name="T"/> to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AsyncTaskQueue`1.FinalizeTaskQueue">
            <inheritdoc />
            <summary>
            Called when all tasks have been finished, use this to notify anyone of the finished list of tasks and providing the correct list of results
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.AsyncTaskStatus">
            <summary>
            Represents the different states in which an async task can exist
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncHttpTask`1.OnFinished(System.Action{`0})">
            <inheritdoc cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnFinished(System.Action{`0})"/>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncHttpTask`1.OnError(System.Action{System.Exception})">
            <inheritdoc cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnError(System.Action{System.Exception})"/>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncHttpTask`1.OnProgress(System.Action{System.Single})">
            <inheritdoc cref="M:Innoactive.Hub.SDK.IAsyncTask`1.OnProgress(System.Action{System.Single})"/>
        </member>
        <member name="T:Innoactive.Hub.SDK.IAsyncTask">
            <summary>
            Represents an asynchronous tasks that will call any number of registered handlers as soon
            as it is finished and emit an according event. Use the Finished event or <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnFinished(System.Action)"/>
            to run code as soon as the task has finished. During the task's operation, the task emits 
            progress updates to any listeners attached to the <see cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate"/> event and any handler registered via
            <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})"/>. In case of an exception the Error event will be emitted and any callbacks
            attached via <see cref="M:Innoactive.Hub.SDK.IAsyncTask.OnError(System.Action{System.Exception})"/> will be executed.
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate">
            <summary>
            Event emitted whenever the progress of the task changes
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.Started">
            <summary>
            Event emitted when this task has been started
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.Finished">
            <summary>
            Event emitted when this task is completed
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.FinishedWithResult">
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.Errored">
            <summary>
            Event emitted when this task has errored
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask.Aborted">
            <summary>
            Event emitted when this task has errored
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.Result">
            <summary>
            The result of the async task. Only available after the task has finished
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.Progress">
            <summary>
            The current progress state of this task (0...1)
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.IsFinished">
            <summary>
            Whether or not the Task is already finished
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.IsRunning">
            <summary>
            Whether or not the Task is currently running (executed)
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.IsErrored">
            <summary>
            Whether or not the Task has errored
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.IsAborted">
            <summary>
            Whether or not the Task has been aborted
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.OnFinished(System.Action)">
            <summary>
            Registers a new callback to be executed as soon as the task has finished.
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.OnFinished(System.Action{System.Object})">
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.OnError(System.Action{System.Exception})">
            <summary>
            Registers a new callback to be executed when an error occurs while executing the task.
            </summary>
            <param name="onError">the callback action to be run upon an exception in the task</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.OnProgress(System.Action{System.Single})">
            <summary>
            Registers a new callback to be executed whenever the progress (0...1) of the task execution changes. 
            Can be used e.g. to visualize the progress as a loading bar
            </summary>
            <param name="onProgress">the callback action to be run upon progress updates</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.Execute">
            <summary>
            Actually runs the delegate and returns its result (an IDisposable object)
            that is to be disposed only after the OnFinished or OnError callback has
            been executed
            </summary>
            <returns>the result of the Task's delegate</returns>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask.TaskDelegate">
            <summary>
            This is the actual delegate that contains the "logic" of the task
            and will run in an asynchronous manner. The TaskDelegate needs to take
            care of calling the respective OnProgress, OnError and OnFinished 
            handlers attached to this AsyncTask
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.Abort">
            <summary>
            Aborts the asynchronously running task by disposing it's disposable delegate
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.InvokeOnFinished">
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Finished"/> event
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.InvokeOnFinished(System.Object)">
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.FinishedWithResult"/> event
            </summary>
            <param name="result">the typed result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.InvokeOnError(System.Exception)">
            <summary>
            Marks this task as errored and notifies all listeners (<seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.Errored"/>) of the provided exception that happened during task execution
            </summary>
            <param name="error">the exception that occured while running the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask.InvokeOnProgress(System.Single)">
            <summary>
            Updates the task's progress and notifies any listeners (<seealso cref="E:Innoactive.Hub.SDK.IAsyncTask.ProgressUpdate"/>) of changed progress on the async task
            </summary>
            <param name="progress">the progress (0...1)</param>
        </member>
        <member name="T:Innoactive.Hub.SDK.IAsyncTask`1">
            <inheritdoc />
            <summary>
            Generic extension of an <see cref="T:Innoactive.Hub.SDK.IAsyncTask"/> that returns a result from the executed task
            </summary>
            <typeparam name="T">the type of result to return</typeparam>
        </member>
        <member name="E:Innoactive.Hub.SDK.IAsyncTask`1.FinishedWithResult">
            <summary>
            Event emitted when this task is completed, contains the result of the task
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IAsyncTask`1.Result">
            <summary>
            The result of the async task. Only available after the task has finished
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask`1.OnFinished(System.Action{`0})">
            <summary>
            Marks the task as finished and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask`1.FinishedWithResult"/> event
            </summary>
            <param name="onFinished">the callback action to be run upon task completion</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask`1.OnError(System.Action{System.Exception})">
            <summary>
            Registers a new callback to be executed when an error occurs while executing the task.
            </summary>
            <param name="onError">the callback action to be run upon an exception in the task</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask`1.OnProgress(System.Action{System.Single})">
            <summary>
            Registers a new callback to be executed whenever the progress (0...1) of the task execution changes. 
            Can be used e.g. to visualize the progress as a loading bar
            </summary>
            <param name="onProgress">the callback action to be run upon progress updates</param>
            <returns>the instance of the task to easily chain method calls</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask`1.InvokeOnFinished(`0)">
            <summary>
            Marks the task as finished with the given result and executes all registered handlers for the <seealso cref="E:Innoactive.Hub.SDK.IAsyncTask`1.FinishedWithResult"/> event
            </summary>
            <param name="results">the typed result with which to complete the task</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTask`1.AsIAsyncTask``1(System.Func{`0,``0})">
            <summary>
            Converts the result of this asynchronous task to the given <typeparamref name="TOther"/> using the provided <paramref name="taskResultConversionFunction"/>
            </summary>
            <typeparam name="TOther">the desired type of result</typeparam>
            <param name="taskResultConversionFunction">The function used to convert the result of type <typeparamref name="T"/> to <typeparamref name="TOther"/></param>
            <returns>An async task that will return a result of the desired type <typeparamref name="TOther"/></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.NoopDisposable">
            <inheritdoc />
            <summary>
            Very simple IDisposable implementation that does nothing when Dispose is called.
            Used for Asynchronous Tasks where the delegate does return a null disposable.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.SimpleAsyncTaskScheduler">
            <summary>
            AsyncTaskScheduler that does not perform any actual scheduling, but immediately sends
            any scheduled HttpRequests.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.SimpleAsyncTaskScheduler.Schedule``1(Innoactive.Hub.SDK.IAsyncTask{``0})">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.SimpleAsyncTaskScheduler.Schedule(Innoactive.Hub.SDK.IAsyncTask)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.SystemProcessStarterStrategy">
            <summary>
            Strategy to start a process. Used on Standalone Windows Platforms.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.IProcessStarterStrategy">
            <summary>
            Implementation which defines how a system process is started.
            Needed because different platforms use different frameworks.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IProcessStarterStrategy.StartProcess(System.Uri)">
            <summary>
            Start the system process with given Uri.
            </summary>
            <param name="uri">Uri to start.</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IProcessStarterStrategy.StartProcess(System.String)">
            <summary>
            Start the system process with given path of document or application file.
            </summary>
            <param name="path">Path of a document or application file.</param>
        </member>
        <member name="T:Innoactive.Hub.SDK.JsonConfigOAuth2Token">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.JsonConfigOAuth2Token.DirectoryPath">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.JsonConfigOAuth2Token.ConfigFileName">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.JsonConfigOAuth2Token.Encryption">
            <summary>
            Decides which encryption is used, the default is ClientBasedEncryption.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.JsonConfigOAuth2Token.Validate">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.Scope">
            <summary>
            simple representation of a domain scope
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Scope.Name">
            <summary>
            the (unique) name of this scope
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.OAuth2Scope">
            <summary>
            representation of an oauth2 scope that can be requested
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.OAuth2Token">
            <summary>
            OAuth2Token class used for the response of the
            grant OAuth password request
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2Token.IsExpired">
            <summary>
            Whether or not this token has expired yet
            </summary>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider">
            <summary>
            BaseOAuthProvider with changed solution for fetching the token from backend.
            This one uses an OAuth2Flow via Browser to fetch AuthCode and use the AuthCode
            to fetch the actual token from backend. 
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.MaxTries">
            <summary>
            Maximum tries before escalating SocketExceptions while setting up the http listener.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.defaultRedirectPort">
            <summary>
            Port used for redirecting.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.clientID">
            <summary>
            ClientID of the application
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.backendURL">
            <summary>
            Innoactive Hub backend base url
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.SetTokenAuthCode(System.String,System.String,System.String)">
            <summary>
            Sets AuthCode for manual fetching.
            </summary>
            <param name="code">Authentification code provided by the backend</param>
            <param name="state">State object, used to request the auth code</param>
            <param name="redirectURI">IF a redirect URI was used, it has to be added to the token request too.</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.GrantUserAccessToken">
            <summary>
            Tries to fetch a new token from backend via OAuth2Flow.
            </summary>
            <returns>An asynchronous task that will resolved with a valid Token or a respective Error Message</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.SwitchUser">
            <summary>
            Switches and also logs the user out of th backend (browser). 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.FetchAuthCode(System.Boolean)">
            <summary>
            Does the whole workload for requesting and fetching the data needed to be able to fetch a new token.
            This method is blocking and has to be called via new background thread.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.RandomDataBase64url(System.UInt32)">
            <summary>
            Returns URI-safe data with a given input length.
            </summary>
            <param name="length">Input length (nb. output will be longer)</param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.AuthCodeFlowOAuth2Provider.Base64urlencodeNoPadding(System.Byte[])">
            <summary>
            Base64url no-padding encodes the given input buffer.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.BaseOAuth2Provider">
            <summary>
            Auth Provider Base class
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.#ctor(Innoactive.Hub.SDK.IHttpProvider,Innoactive.Hub.SDK.ISerializationProvider,Innoactive.Hub.SDK.ICredentialsProvider,Innoactive.Hub.SDK.ICredentialsProvider,Innoactive.Hub.SDK.IScopeProvider,Innoactive.Hub.SDK.IAccessTokenStore,System.String)">
            <summary>
            Main Constructor
            </summary>
            <param name="httpProvider"></param>
            <param name="serializationProvider"></param>
            <param name="userCredentialsProvider"></param>
            <param name="clientCredentialsProvider"></param>
            <param name="accessTokenStore"></param>
            <param name="backendBaseUrl"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.AuthenticateRequest(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Tries to add authentication details to the given HttpRequest
            </summary>
            <param name="request">The request without any authentication data</param>
            <returns>the request with authentication credentials as an asynchronous result</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.AuthenticateUsingOAuth">
            <summary>
            Authentication using OAuth. Trying to obtain a valid oauth token (if none is present) or
            refreshing an existing one if desired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.AuthenticationTaskDelegate(Innoactive.Hub.SDK.IAsyncTask{Innoactive.Hub.SDK.OAuth2Token})">
            <summary>
            Delegate for the authenticationt task that checks current state and chooses the correct authentication method
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.CheckTokenIsValid">
            <summary>
            returns true if the token appears to be valid, i.e. it is not expired and is for the requested user
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.NotifyValidAccessTokenReceived(Innoactive.Hub.SDK.OAuth2Token)">
            <summary>
            Called as soon as a new user access token has been granted
            using a) refresh_token grant or b) password grant
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.RevokeUserAccessToken(Innoactive.Hub.SDK.OAuth2Token)">
            <summary>
            revokes the given useraccesstoken
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.GrantUserAccessToken">
            <summary>
            Tries to grant a user access token using the known UserCredentials and ClientCredentialsProvider
            </summary>
            <returns>An asynchronous task that will resolved with a valid Token or a respective Error Message</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.RefreshUserAccessToken(Innoactive.Hub.SDK.OAuth2Token)">
            <summary>
            Tries to grant a user access token using the known UserCredentials and ClientCredentialsProvider
            </summary>
            <returns>An asynchronous task that will resolved with a valid Token or a respective Error Message</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.GrantClientAccessToken">
            <summary>
            Tries to grant a client access token using the known ClientCredentialsProvider
            </summary>
            <returns>An asynchronous task that will resolved with a valid Token or a respective Error Message</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.WrapTokenRequestTask(Innoactive.Hub.SDK.IAsyncTask{Innoactive.Hub.SDK.OAuth2Token},System.Func{System.Exception,System.Exception})">
            <summary>
            Wraps an authorization task with locks so that only one task is actually performed at a time, to
            prevent races in received auth tokens
            </summary>
            <param name="task"></param>
            <param name="processExceptionCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.IsTokenValid">
            <summary>
            Checks whether or not the known token is still valid (or already expired)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.BaseOAuth2Provider.RetryOnTaskError``1(System.Exception,Innoactive.Hub.SDK.IAsyncTask{``0},Innoactive.Hub.SDK.IAsyncTask{``0},Innoactive.Hub.SDK.IHttpRequest,System.Int32@)">
            <summary>
            checks why a task failed, and retries it if there is a meaningful chance to resolvve the error
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.AuthenticateRequest(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Tries to add authentication details to the given request and returns an 
            async task which will yield the request with authentication details in the end
            This request still has to be sent afterwards and it is not granted that authentication
            will succeed!
            </summary>
            <param name="request">the request to be authenticated</param>
            <returns>an async task that will yield the request with authentication details (or raise an error instead)</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.RetryTaskOnAuthFailure``1(Innoactive.Hub.SDK.IAsyncTask{``0},Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Configures the task so that it is retried when the task fails due to invalid authorization tokens,
            in which case the authorization tokens are reset to manage expiring tokens.
            </summary>
            <param name="task">the task to retry on failure</param>
            <param name="request">the original request that is being processed by the failed task</param>
            <returns>a new async task that manage retrying the original task on failure</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.HasSession">
            <summary>
            Returns if there is currently a session (expired or not)
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.SessionIsExpired">
            <summary>
            Clear any caching of user authorization, so that the next request requires full re-authorization
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.CanRefreshSession">
            <summary>
            Returns if the current session can be refreshed
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.GetRemainingSessionDuration">
            <summary>
            Returns the remaining time until authentication must be refreshed
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.RefreshSession(System.Action,System.Action{System.Exception})">
            <summary>
            Refresh the current session (if CanRefreshSession == true), and calls the success/failure callbacks
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.ClearCurrentSession">
            <summary>
            Clear any caching of user authorization, so that the next request requires full re-authorization
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAuthProvider.SwitchUser">
            <summary>
            Removes the token and switches the account
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.IScopeProvider">
            <summary>
            Base interface for all scope providers
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IScopeProvider.GetScopes">
            <summary>
            returns the list of provided scopes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IScopeProvider.GetScopesAsString">
            <summary>
            returns the scopes of this provider as a spaces eparated list of the scope names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IScopeProvider.HasScopes">
            <summary>
            Determs if scopes are set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2ScopeProvider.#ctor(System.String[])">
            <summary>
            simple constructor taking a list of scope names
            </summary>
            <param name="scopes"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2ScopeProvider.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Simple constructor receiving a list of strings that are to be 
            requested as scopes
            </summary>
            <param name="scopes"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2ScopeProvider.#ctor(System.Collections.Generic.IList{Innoactive.Hub.SDK.Scope})">
            <summary>
            Simple constructor receiving a list of scopes that are to be 
            requested as scopes
            </summary>
            <param name="scopes"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2ScopeProvider.GetScopes">
            <summary>
            <inheritdoc cref="M:Innoactive.Hub.SDK.IScopeProvider.GetScopes"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.OAuth2ScopeProvider.GetScopesAsString">
            <summary>
            <inheritdoc cref="M:Innoactive.Hub.SDK.IScopeProvider.GetScopesAsString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetPermissions(System.String)">
            <summary>
            Creates a task that retrieves a list of available permissions which match the given name (<see cref="!:Permission.CodeName"/>).
            Should just return one permission.
            </summary>
            <param name="permission">Codename of the permission</param>
            <returns><see cref="T:Innoactive.Hub.SDK.AsyncTask"/> which returns a list of user permissions when finished or an error when failed</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetPermissions(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available permissions which match the indicated Options.
            </summary>
            <returns><see cref="T:Innoactive.Hub.SDK.AsyncTask"/> which returns a list of user permissions when finished or an error when failed</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetMediaStream(System.Int32)">
            <summary>
            Experimental. Expect this to change in the future without prior deprecation.
            Returns the async task which loads a specific stream.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetMediaStreams(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Experimental. Expect this to change in the future without prior deprecation.
            Creates a task that retrieves a list of available streams which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetApplications(System.Int32,System.Int32)">
            <summary>
            Creates a task that retrieves a list of available applications.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetApplications(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available applications which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetApplication(System.Int32,System.Boolean)">
            <summary>
            Creates a task that retrieves the application with the provided Hub <paramref name="id"/>.
            If <paramref name="current"/> is true, the application version marked as "current" will be retrieved,
            otherwise, the latest version will be retrieved.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadApplication(System.String,System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Creates a task that uploads a new application to the Hub. Requires a zipped archive
            containing the application.
            </summary>
            <returns>A reference to the newly created application</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadApplication(Innoactive.Hub.SDK.Models.Application,System.String,System.IO.Stream)">
            <summary>
            Creates a task that uploads a new application to the Hub. Requires a zipped archive
            containing the application.
            </summary>
            <returns>A reference to the newly created application</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UpdateApplication(Innoactive.Hub.SDK.Models.Application,System.String,System.IO.Stream)">
            <summary>
            Updates an existing application with a new zipped application archive, and allows changing additional
            properties like version etc.
            </summary>
            <returns>A reference to the updated application</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetAssets(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a task that retrieves a list of available assets.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetAssets(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available assets which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.ChangeAssetPermissions(System.Int32,Innoactive.Hub.SDK.Models.UserPermissions)">
            <summary>
            Creates a task that updates the provided asset's permissions in the Hub backend.
            </summary>
            <param name="assetId">The ID of the asset where the permissions would be updated.</param>
            <param name="userPermissions"><see cref="T:Innoactive.Hub.SDK.Models.UserPermissions"/> to be applied to the asset.</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetAudios(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available audios which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetBookmarks(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available bookmarks which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetRealities(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available realities which match the indicated Options.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.HubClient.UploadResponse">
            <summary>
            Local class to extract only the Id from the response of a model or map upload.
            Required because currently, the response from a model upload provides a <see cref="T:Innoactive.Hub.SDK.Models.Model"/>,
            but contains an invalid entry in the upload field that prevents deserialization.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetModel(Innoactive.Hub.SDK.HubClient.ApiVersion,System.Int32,Innoactive.Hub.SDK.HubClient.EMapResolution)">
            <summary>
            Retrieves the <see cref="T:Innoactive.Hub.SDK.Models.Model"/> with the specified <paramref name="modelId"/>.
            </summary>
            <param name="version">ApiVersion to use for retrieving models</param>
            <param name="modelId">Id of the model to download</param>
            <param name="resolution">Desired resolution of textures for the model's materials</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetModel(System.Int32,Innoactive.Hub.SDK.HubClient.ModelArguments)">
            <summary>
            Retrieves the <see cref="T:Innoactive.Hub.SDK.Models.Model"/> with the specified <paramref name="modelId"/>.
            </summary>
            <param name="modelId">Id of the model to download</param>
            <param name="args">Model specifications</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetModels(Innoactive.Hub.SDK.HubClient.ApiVersion,System.Int32,System.Int32,Innoactive.Hub.SDK.HubClient.EMapResolution)">
            <summary>
            Retrieves a list of <see cref="T:Innoactive.Hub.SDK.Models.Model"/>s.
            </summary>
            <param name="version">ApiVersion to use for retrieving models</param>
            <param name="pageSize">Size of the page of models</param>
            <param name="page">Index of the page of models to retrieve</param>
            <param name="resolution">Desired resolution of textures for the models' materials</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetModels(System.Int32,System.Int32,Innoactive.Hub.SDK.HubClient.ModelArguments)">
            <summary>
            Retrieves a list of <see cref="T:Innoactive.Hub.SDK.Models.Model"/>s.
            </summary>
            <param name="pageSize">Size of the page of models</param>
            <param name="page">Index of the page of models to retrieve</param>
            <param name="args">Specifications for models</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetModels(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions,Innoactive.Hub.SDK.HubClient.ModelArguments)">
            <summary>
            Retrieves a list of <see cref="T:Innoactive.Hub.SDK.Models.Model"/> which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadModel(System.String,System.String)">
            <summary>
            Uploads a new model represented by the passed 3d model file.
            Will create a tasks that uploads the model and returns the Id of the newly created model.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            </summary>
            <param name="modelFilename">Filename of the model file</param>
            <param name="modelFileContents">Data contents of the 3D model file</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadModelChunked(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Uploads a new model represented by the passed 3d model file.
            Will create a task that uploads the model and returns the Id of the newly created model.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="name">Name of the new Hub Model</param>
            <param name="modelFilename">File name of the source (extension represents model file format)</param>
            <param name="modelFileContents">Actual data content of the model file, in string format for textual model files</param>
            <param name="uploadAsPartialModel">If set to true, the uploaded model will be marked as partial (<see cref="P:Innoactive.Hub.SDK.Models.Model.IsPartial"/>)</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded model</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadModelChunked(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
            Uploads a new model represented by the passed 3d model file.
            Will create a task that uploads the model and returns the Id of the newly created model.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="name">Name of the new Hub Model</param>
            <param name="modelFilename">File name of the source (extension represents model file format)</param>
            <param name="modelFileContents">Actual data content of the model file</param>
            <param name="uploadAsPartialModel">If set to true, the uploaded model will be marked as partial (<see cref="P:Innoactive.Hub.SDK.Models.Model.IsPartial"/>)</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded model</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadModelChunked(System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Uploads a new model represented by the passed 3d model file.
            Will create a task that uploads the model and returns the id of the newly created model.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="name">Name of the new Hub Model</param>
            <param name="modelFilename">File name of the source (extension represents model file format)</param>
            <param name="modelFileContents">Actual data content of the model file</param>
            <param name="uploadAsPartialModel">If set to true, the uploaded model will be marked as partial (<see cref="P:Innoactive.Hub.SDK.Models.Model.IsPartial"/>)</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded model</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMap(System.String,Innoactive.Hub.SDK.Models.Material,System.String,System.Byte[])">
            <summary>
            Uploads a new map for a backend material.
            </summary>
            <param name="mapType">Type of the material to upload. Has to be one of the MAPTYPE_* constants defined by <see cref="!:Model>"/></param>
            <param name="material">The material for which the texture should be uploaded</param>
            <param name="textureFilename">Filename of the texture to upload</param>
            <param name="textureData">Data of the texture to upload</param>
            <returns>Task that on Execute uploads the map returns the resulting data</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMap(System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            Uploads a new map for a backend material.
            </summary>
            <param name="mapType">Type of the material to upload. Has to be one of the MAPTYPE_* constants defined by <see cref="T:Innoactive.Hub.SDK.Models.Model"/></param>
            <param name="materialId">Id of the Hub material for which the texture should be uploaded</param>
            <param name="textureFilename">Filename of the texture to upload</param>
            <param name="textureData">Data of the texture to upload</param>
            <returns>Task that on Execute uploads the map returns the resulting data</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMapChunked(Innoactive.Hub.SDK.Models.Material,System.String,System.String,System.IO.Stream)">
            <summary>
            Uploads an image and sets it as texture map of type <paramref name="mapType"/> for the material <paramref name="material"/>.
            Will create a task that uploads the image and returns the id of the newly created map.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="material"><see cref="T:Innoactive.Hub.SDK.Models.Material"/> for which the map should be uploaded</param>
            <param name="mapType">Type of the map(<see cref="P:Innoactive.Hub.SDK.Models.Map.MapType"/>)</param>
            <param name="textureFilename">File name of the source (extension represents model file format)</param>
            <param name="textureFileContents">Actual data content of the texture map file</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded map</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMapChunked(Innoactive.Hub.SDK.Models.Material,System.String,System.String,System.Byte[])">
            <summary>
            Uploads an image and sets it as texture map of type <paramref name="mapType"/> for the material <paramref name="material"/>.
            Will create a task that uploads the image and returns the id of the newly created map.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="material"><see cref="T:Innoactive.Hub.SDK.Models.Material"/> for which the map should be uploaded</param>
            <param name="mapType">Type of the map(<see cref="P:Innoactive.Hub.SDK.Models.Map.MapType"/>)</param>
            <param name="textureFilename">File name of the source (extension represents model file format)</param>
            <param name="textureFileContents">Actual data content of the texture map file</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded map</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMapChunked(System.Int32,System.String,System.String,System.Byte[])">
            <summary>
            Uploads an image and sets it as texture map of type <paramref name="mapType"/> for the material <paramref name="materialId"/>.
            Will create a task that uploads the image and returns the id of the newly created map.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="materialId">Id of the <see cref="T:Innoactive.Hub.SDK.Models.Material"/> for which the map should be uploaded</param>
            <param name="mapType">Type of the map(<see cref="P:Innoactive.Hub.SDK.Models.Map.MapType"/>)</param>
            <param name="textureFilename">File name of the source (extension represents model file format)</param>
            <param name="textureFileContents">Actual data content of the texture map file</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded map</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadMaterialMapChunked(System.Int32,System.String,System.String,System.IO.Stream)">
            <summary>
            Uploads an image and sets it as texture map of type <paramref name="mapType"/> for the material <paramref name="materialId"/>.
            Will create a task that uploads the image and returns the id of the newly created map.
            Additional model settings (e.g. setting of material parameters) have to be performed afterwards.
            This variant will use chunked uploads of the data, in order to allow for bigger file sizes.
            </summary>
            <param name="materialId">Id of the <see cref="T:Innoactive.Hub.SDK.Models.Material"/> for which the map should be uploaded</param>
            <param name="mapType">Type of the map(<see cref="P:Innoactive.Hub.SDK.Models.Map.MapType"/>)</param>
            <param name="textureFilename">File name of the source (extension represents model file format)</param>
            <param name="textureFileContents">Actual data content of the texture map file</param>
            <returns>Task that, when finished, provides the Hub Id of the newly uploaded map</returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.HubClient.ModelArguments">
            <summary>
            Model specifications for backend request, including file format, resolution etc..
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.HubClient.ImageUploadResponse">
            <summary>
            Local class to extract only the Id from the response of a model upload.
            Required because currently, the response from a model upload provides a <see cref="T:Innoactive.Hub.SDK.Models.Image"/>,
            but contains invalid entries (specifically, width/height are still null and thus cannot be deserialized
            as integers) that prevent deserialization of the full mode.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetImage(System.Int32,System.UInt32)">
            <summary>
            Creates a task that retrieves the Image with the specified Hub id from the backend.
            By specifying <paramref name="resolution"/>, it is possible to limit the maximum
            size of the retrieved image, which will be down-scaled if the original resolution
            is larger than the requested resolution.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetImages(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a task that retrieves a list of available images at the Hub backend.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetImages(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions,System.UInt32)">
            <summary>
            Creates a task that retrieves a list of available images at the Hub backend which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadImage(System.String,System.String,System.Byte[],Innoactive.Hub.SDK.Models.Image.DistortionType,Innoactive.Hub.SDK.Models.Image.StereoType,System.String[])">
            <summary>
            Creates a task that uploads the provided image file and creates a new Image in the Hub backend.
            On success, the task returns the Id of the newly created image.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.UploadImage(System.String,System.String,System.IO.Stream,Innoactive.Hub.SDK.Models.Image.DistortionType,Innoactive.Hub.SDK.Models.Image.StereoType,System.String[])">
            <summary>
            Creates a task that uploads the provided image file and creates a new Image in the Hub backend.
            On success, the task returns the Id of the newly created image.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetPdfs(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available pdfs which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.GetVideos(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates a task that retrieves a list of available videos which match the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.SetSpaceVersionAsDefault(System.String)">
            <summary>
            Creates a task that sets a space version with given id to be the default space version.
            </summary>
            <param name="spaceId">Id of the new default space version</param>
            <returns><see cref="T:Innoactive.Hub.SDK.AsyncTask"/> which has a reference to the new space version</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubClient.ClearSpaceVersionAsDefault(System.String)">
            <summary>
            Creates a task that clears a space version with given id to not be the default space version anymore.
            </summary>
            <param name="spaceId">Id of the space version to clear</param>
            <returns><see cref="T:Innoactive.Hub.SDK.AsyncTask"/> which has a reference to the cleared space version</returns>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpClient.HttpProvider">
            <summary>
            HttpProvider used to send requests
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpClient.AuthProvider">
            <summary>
            AuthProvider used to obtain Authentication and Authorization for requests
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpClient.SerializationProvider">
            <summary>
            SerializationProvider used to serialize and deserialize request and response data
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpClient.DownloadFile(System.String)">
            <summary>
            Downloads the file at the specified url. Returns an asynchronous task that will
            be resolved with the bytes of the download on success or with an error otherwise.
            </summary>
            <param name="fileUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpClient.DownloadFileStream(System.String)">
            <summary>
            Downloads the file at the specified url. Returns an asynchronous task that will
            be resolved with a Stream of the download on success or with an error otherwise.
            This method should be used to download big files to prevent out of memory exceptions.
            </summary>
            <param name="fileUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.DateTimeHelper.UnixTimeStringToDateTime(System.String)">
            <summary>
            Converts a UTC timestring to Datetime. Important for JsonConvert.Serialization also as it throws exception if not done like this
            </summary>
            <param name="dateTimeString"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.Exceptions.HttpErrorException">
            <summary>
            Exception occurring during http operations, e.g. when using <seealso cref="T:Innoactive.Hub.SDK.IHttpProvider"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Exceptions.HttpErrorException.RawErrorMessage">
            <summary>
            The raw error message describing the http exception
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Exceptions.HttpErrorException.Text">
            <summary>
            Any additional response text that came along with the http exception
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Exceptions.HttpErrorException.StatusCode">
            <summary>
            Http Status Code describing the problem that occurred during the http operation
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Exceptions.HttpErrorException.ResponseHeaders">
            <summary>
            List of all headers sent along with the http error response
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Exceptions.HttpErrorException.#ctor(System.String,System.Net.HttpStatusCode)">
            <param name="error">Descriptive error message</param>
            <param name="statusCode">Http Status Code describing the problem that occurred during the http operation</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.Exceptions.HttpErrorException.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Net.HttpStatusCode)">
            <param name="error">Descriptive error message</param>
            <param name="responseHeaders">Headers received for the errored http response</param>
            <param name="text">Any further informational text describing the exception</param>
            <param name="statusCode">Http Status Code describing the problem that occurred during the http operation</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.Exceptions.HttpErrorException.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Net.HttpStatusCode,System.Exception)">
            <param name="error">Descriptive error message</param>
            <param name="responseHeaders">Headers received for the errored http response</param>
            <param name="text">Any further informational text describing the exception</param>
            <param name="statusCode">Http Status Code describing the problem that occurred during the http operation</param>
            <param name="innerException">Original exception</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.Exceptions.HttpErrorException.ToString">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.CachingHttpProvider">
            <summary>
            Wrapper for all IHttpProviders.
            Catches 304-Exceptions that are important for Cache and adds Cached data where possible
            simply use it like as if it was the original IHttpProvider
            Caching supports byte[], string and Stream only
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.CachingHttpProvider.Log">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.CachingHttpProvider.CacheBackend">
            <summary>
            Cache manager instance used to cache responses and return already cached ones
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.WrapSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
            <summary>
            Prepares Request and returns an AsyncHttpTask
            Internally also adds Cached data if available for the URL of the request
            </summary>
            <returns>IAsyncHttpTask can be used with OnProgress, OnFinished, OnError and Execute like a Promise</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.IsEligibleForExpirationCaching(Innoactive.Hub.SDK.IHttpRequest,Innoactive.Hub.Cache.ICacheItem{System.IO.Stream})">
            <summary>
            Whether or not the given request can be answered with a cached response directly
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.HasNoCacheHeader(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Whether or not the request has the Cache-Control-Header set to no-cache in order to prevent receiving cached responses
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.InvokeOnFinishedCached``1(Innoactive.Hub.SDK.IAsyncTask{Innoactive.Hub.SDK.IHttpResponse{``0}},Innoactive.Hub.SDK.IHttpRequest,Innoactive.Hub.Cache.ICacheItem{System.IO.Stream})">
            <summary>
            Loads Data from Cache, then calls myTask.OnFinished as soon as data is available
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.GetHeadersForCachedItem(Innoactive.Hub.Cache.ICacheItem{System.IO.Stream})">
            <summary>
            Restore HTTP headers for cached items
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.CreateCacheResponse``1(System.IO.Stream,Innoactive.Hub.SDK.IHttpRequest,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prepare the Response for the AsyncTask
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="dataStream"></param>
            <param name="request"></param>
            <param name="cachedResponseHeaders"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.AddEtagHeader(Innoactive.Hub.SDK.IHttpRequest,Innoactive.Hub.Cache.ICacheItem{System.IO.Stream})">
            <summary>
            add ETag If-None-Match header to base Headers. In order to support ETag based caching, <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"/>
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.CachingHttpProvider.AddIfModifiedSinceHeader(Innoactive.Hub.SDK.IHttpRequest,Innoactive.Hub.Cache.ICacheItem{System.IO.Stream})">
            <summary>
            Add LastModified support -> If-Modified-Since Header will be set.
            read more here: <seealso href="https://developer.mozilla.org/de/docs/Web/HTTP/Headers/If-Modified-Since" />
            </summary>
            <param name="request"></param>
            <param name="cacheItem"></param>
        </member>
        <member name="T:Innoactive.Hub.SDK.CachingHttpProvider`1">
            <summary>
            Generic version of <see cref="T:Innoactive.Hub.SDK.CachingHttpProvider"/> that creates an instance of the
            generic type as wrapped HttpProvider.
            </summary>
            <typeparam name="T">Type of HttpProvider to instantiate</typeparam>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetHttpProviderBase">
            <inheritdoc />
            <summary>
            Basic implementation of a <seealso cref="T:Innoactive.Hub.SDK.IHttpProvider"/> based on which specific implementations that make use of <seealso cref="T:System.Net.WebHeaderCollection"/>
            for Http headers can be implemented
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetHttpProviderBase.GetHeaders(System.Net.WebHeaderCollection)">
            <summary>
            Helper function for converting a System.Net.WebHeaderCollection to a simple dictionary of header strings
            </summary>
            <param name="headerCollection"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.IAsyncTaskScheduler">
            <summary>
            Base class for Schedulers for <see cref="T:Innoactive.Hub.SDK.AsyncTask"/>s that allow controlling
            the time and order in which tasks are executed.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTaskScheduler.Schedule``1(Innoactive.Hub.SDK.IAsyncTask{``0})">
            <summary>
            Register the AsyncTask for scheduling. The task may be executed immediately,
            or at a later time depending on the scheduling method.
            </summary>
            <typeparam name="T">return type of the task</typeparam>
            <returns>Task wrapping the passed task, that performs the scheduling on execution</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IAsyncTaskScheduler.Schedule(Innoactive.Hub.SDK.IAsyncTask)">
            <summary>
            Register the AsyncTask for scheduling. The task may be executed immediately,
            or at a later time depending on the scheduling method.
            </summary>
            <returns>Task wrapping the passed task, that performs the scheduling on execution</returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.MaxConcurrentAsyncTaskScheduler">
            <summary>
            AsyncTaskScheduler that limits the maximum number of concurrently running AsyncTasks. If more
            than <see cref="P:Innoactive.Hub.SDK.MaxConcurrentAsyncTaskScheduler.MaxConcurrentlyRunningTasks"/> are sent at the same time, all requests exceeding
            the limit will be queued and sent as soon as running requests finish.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MaxConcurrentAsyncTaskScheduler.MaxConcurrentlyRunningTasks">
            <summary>
            Specifies the maximum number of AsyncTasks that may run concurrently.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.MaxConcurrentAsyncTaskScheduler.Schedule(Innoactive.Hub.SDK.IAsyncTask)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.MaxConcurrentAsyncTaskScheduler.Schedule``1(Innoactive.Hub.SDK.IAsyncTask{``0})">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.WrapperHttpProvider">
            <summary>
            Abstract base for HttpProviders that wrap another HttpProvider, and forward
            HttpRequest sends to this instance.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.WrapperHttpProvider.HttpProvider">
            <summary>
            The wrapped HttpProvider to which any HttpRequests will be forwarded
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.WrapperHttpProvider.HttpRequestScheduler">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.WrapperHttpProvider.Send``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.WrapperHttpProvider.WrapSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Implemetation method for wrapping the HttpRequest task and forwarding it to the wrapped provider.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.HttpProvider">
            <summary>
            Abstract base for HttpProviders that provides base implementation
            for scheduling and exception event forwarding.
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.HttpProvider.OnHttpRequestException">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpProvider.HttpRequestScheduler">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpProvider.Send``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpProvider.CreateSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Implementation method for creating the task that performs the actual sending of the HttpRequest
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetWebClientHttpProvider">
            <inheritdoc />
            <summary>
            Implementation of <see cref="T:Innoactive.Hub.SDK.IHttpProvider" /> that relies on .NET's built-in <seealso cref="T:System.Net.WebClient" />s.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.RequestState`1">
            <summary>
            Struct being passed along to any async callbacks to remember
            the context of an async operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.RequestState`1.ResponseTask">
            <summary>
            the async response task used to invoke finished, error and progress handlers
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.RequestState`1.Request">
            <summary>
            the original IHttpRequest that was passed to the Send Method of the HttpProvider
            contains request headers and deserialization context for the potential response
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.CreateSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.Client_RequestCompleted``1(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Handler called as soon as the async operation of the WebClient (e.g. UploadDataAsync
            or DownloadDataAsync) has finished (either with an error or successfully)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebClientHttpProvider.Client_ProgressChanged``1(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Progress handler for the async operations triggered by the WebClient.
            Handles progress for both upload (POST, PUT) and download (GET) operations.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider">
            <inheritdoc />
            <summary>
            Implementation of <see cref="T:Innoactive.Hub.SDK.IHttpProvider" /> that relies on .NET's built-in <seealso cref="T:System.Net.WebRequest" />s.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1">
            <summary>
            Object being passed along to any async callbacks to remember
            the context of the original operation in the async callbacks
            also see https://stuff.seans.com/2009/01/05/using-httpwebrequest-for-asynchronous-downloads/ for
            asynchronous requests with progress indicators.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.BufferSize">
            <summary>
            Size of the buffer when reading in the response stream
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.ResponseStream">
            <summary>
            Complete in-memory representation of the response's stream
            this stream will be filled (via the specified readbuffer)
            and will contain the entire response data of a request in the end
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.ReadBuffer">
            <summary>
            The actually used buffer for reading data from the response's http stream
            into the in-memory response stream
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.Request">
            <summary>
            the issued HttpWebRequest instance containing information
            about the originally issued request
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.Response">
            <summary>
            the obtained HttpWebResponse instance containing information
            about the result of the issued request
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.Originalrequest">
            <summary>
            the originally created IHttpRequest instance as passed along
            to the HttpProvider's Send method
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.ResponseTask">
            <summary>
            the async response task used to invoke finished, error and progress handlers
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState`1.#ctor">
            <summary>
            Simple constructor initializing values to meaningful defaults
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.WebRequestDisposable">
            <summary>
            Disposable used to dispose (abort) WebRequests
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.InMemoryResponseStreamLengthThreshold">
            <summary>
            Threshold (Bytes) which when surpassed will lead to using a FileStream instead of an in-memory stream
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.SubFolderName">
            <summary>
            Name of the subfolder within the temporary folder where to store temporarily cached responses
            TODO: These responses should also be removed from there again once the stream has been closed
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.CreateSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.ResponseCallback``1(System.IAsyncResult)">
            <summary>
            Callback function executed as soon as a response from the server has been obtained
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asynchronousResult"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.ShouldUseMemoryStream``1(Innoactive.Hub.SDK.DotNetWebRequestHttpProvider.RequestState{``0})">
            <summary>
            Whether or not a memory stream should be used as the response stream for the given request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestState"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.GzippedHttpProvider">
            <summary>
            Simple Wrapping HttpProvider which enables GZip enconding on requests.
            Will only be done if no other content-encoding is already set.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.GzippedHttpProvider.WrapSendTask``1(Innoactive.Hub.SDK.IHttpRequest)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.GzippedHttpProvider`1">
            <summary>
            Generic version of <see cref="T:Innoactive.Hub.SDK.GzippedHttpProvider"/> that creates an instance of the
            generic type as wrapped HttpProvider.
            </summary>
            <typeparam name="T">Type of HttpProvider to instantiate</typeparam>
        </member>
        <member name="T:Innoactive.Hub.SDK.HubWebClient">
            <summary>
            Better implementation of System.Net.Webclient which
            allows retrieving the Statuscode of a response.
            See https://stackoverflow.com/a/7253331/1142028 for credits, details and awesomeness.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HubWebClient.GetWebRequest(System.Uri)">
             <summary>
             <inheritdoc cref="M:Innoactive.Hub.SDK.HubWebClient.GetWebRequest(System.Uri)"/>
            
             override this method to store a reference to the issued webrequest
             and get access to its status code later on.
             </summary>
             <param name="address"></param>
             <returns></returns>
        </member>
        <member name="E:Innoactive.Hub.SDK.IHttpProvider.OnHttpRequestException">
            <summary>
            Emitted whenever a http request produces an exception.
            Allows observing all exceptions without requiring access to specific request.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpProvider.HttpRequestScheduler">
            <summary>
            Scheduler to be used for scheduling the sending of HttpRequests.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpProvider.Send``1(Innoactive.Hub.SDK.IHttpRequest)">
            <summary>
            Creates a task that performs the sending and response/error handling
            of the provided HttpRequest.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetApplicationsRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available applications. If <paramref name="searchOptions"/> is provided,
            only applications matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetApplicationRequest(System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves the application
            with the provided Hub <paramref name="id"/>. If <paramref name="current"/>
            is true, the application version marked as "current" will be retrieved,
            otherwise, the latest version will be retrieved.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.CreateApplication(Innoactive.Hub.SDK.Models.Application)">
            <summary>
            Creates an HttpRequest that creates a new application with
            properties defined by <paramref name="application"/>.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.UpdateApplication(Innoactive.Hub.SDK.Models.Application)">
            <summary>
            Creates an HttpRequest that updates an existing application's properties.
            Requires <paramref name="application"/> to have a valid Id entry.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.UploadApplication(System.String,System.IO.Stream)">
            <summary>
            Creates a ChunkedFileHttpUploader that uploads the provided file to the Hub backend.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetAssetsListRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available assets. If <paramref name="filteredSearchOptions"/> is provided,
            only applications matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.UpdateAssetPermissions(System.Int32,Innoactive.Hub.SDK.Models.UserPermissions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that updates an existing asset's permissions.
            </summary>
            <param name="assetId">The ID of the asset where the permissions would be updated.</param>
            <param name="userPermissions"><see cref="T:Innoactive.Hub.SDK.Models.UserPermissions"/> to be applied to the asset.</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetAudiosRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available audios. If <paramref name="searchOptions"/> is provided,
            only audios matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetMediaStreamsRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available streams. If <paramref name="searchOptions"/> is provided,
            only streams matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetMediaStreamRequest(System.Int32)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a Stream.
            If <paramref name="searchOptions"/> is provided,
            only streams matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetPermissionRequest(System.String)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of permissions
            that match the given name.
            </summary>
            <param name="permission">Codename of the permission</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetPermissionRequest">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of permissions.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetRealitiesRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available realities which fits the indicated Options.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetModelsRequest(Innoactive.Hub.SDK.HubClient.ApiVersion,Innoactive.Hub.SDK.HubClient.EFileFormat,Innoactive.Hub.SDK.HubClient.EMapResolution,Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available models. If <paramref name="searchOptions"/> is provided,
            only models matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetImagesRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions,System.UInt32)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available images. If <paramref name="searchOptions"/> is provided,
            only iamges matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetPdfsRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available pdfs. If <paramref name="searchOptions"/> is provided,
            only applications matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.GetVideosRequest(Innoactive.Hub.Client.PaginationOptions,Innoactive.Hub.Client.OrderingOptions,Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that retrieves a list of
            available videos. If <paramref name="searchOptions"/> is provided,
            only videos matching this pattern will be returned.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.SetSpaceVersionAsDefault(System.String)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that sets a space version with given id
            to be the new default space version.
            </summary>
            <param name="spaceId">Id of new default space version</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.RequestFactory.ClearSpaceVersionAsDefault(System.String)">
            <summary>
            Creates an <see cref="T:Innoactive.Hub.SDK.HttpRequest"/> that clears a space version with given id
            to not be the default space version anymore.
            </summary>
            <param name="spaceId">Id of default space version to clear</param>
        </member>
        <member name="T:Innoactive.Hub.SDK.HtmlForm">
            <summary>
            Abstract implementation of an HTML Form used to send data with POST requests.
            <see href="https://www.w3.org/TR/html401/interact/forms.html#form-content-type"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.HtmlForm.FormElement">
            <summary>
            Basic implementation of a FormElement
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.HtmlForm.FormElement.Key">
            <summary>
            The form element's (unique) key
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HtmlForm.FormElement.#ctor(System.String)">
            <summary>
            Base constructor getting the key of the form-element (usually referenced as the name of a form element)
            </summary>
            <param name="key">the input's (unique) key / form input name</param>
        </member>
        <member name="P:Innoactive.Hub.SDK.HtmlForm.FormDataElements">
            <summary>
            List of actual form data (key-value pairs)
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.HtmlForm.ContentType">
            <summary>
            The content type of the form's contents
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HtmlForm.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HtmlForm.AddData(System.String,System.String)">
            <summary>
            Adds a new form element with the specified <paramref name="key"/> and <paramref name="value"/> to the form
            </summary>
            <param name="key">the key of the form element</param>
            <param name="value">the value of the form element</param>
            <returns>the instance of the <see cref="T:Innoactive.Hub.SDK.HtmlForm"/> for further usage (Builder pattern)</returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HtmlForm.GetEncodedFormData(System.Text.Encoding)">
            <summary>
            Returns all data that is currently present in this form as a string representation suitable to be sent as
            the body of a Http (POST) request, encoded with the given encoding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HtmlForm.HasData">
            <returns>Whether or not this form has data attached and needs to be submitted</returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.MultiPartForm">
            <inheritdoc />
            <summary>
            Basic implementation of a HTML form with multipart encoding. <seealso href="https://tools.ietf.org/html/rfc2388" />
            and <seealso href="https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer">
            <summary>
            Helper class to assemble byte data from a combination of string and binary data
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer.#ctor(System.Text.Encoding)">
            <summary>
            Default constructor specifying the <paramref name="encoding"/> to be used when adding lines of text to the buffer
            </summary>
            <param name="encoding">the encoding to be used for string data added to the buffer</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer.AddLine(System.String)">
            <summary>
            Adds the given <paramref name="text"/> as bytes (encoded using <seealso cref="F:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer.encoding"/>) to the byte buffer and appends an EOL in the end.
            </summary>
            <param name="text">the text to be append to the buffer</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer.AddData(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Adds the given byte data <paramref name="data"/> to the buffer and appends an EOL.
            </summary>
            <param name="data">the byte data to be appended to the buffer</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.ByteBuffer.GetData">
            <summary>
            Retrieves the entire byte buffer as a byte array
            </summary>
            <returns>all the current contents of the byte buffer</returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.MultiPartForm.MultipartFormElement">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.MultipartFormElement.Disposition">
            <summary>
            Provides the string representing this element's disposition type (Excluding Disposition: prefix).
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.MultipartFormElement.ContentType">
            <summary>
            Provides a string representing the content type (e.g. application/octet-stream), may be null.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.MultipartFormElement.AddData(Innoactive.Hub.SDK.MultiPartForm.ByteBuffer)">
            <summary>
            Add the data for this element to the provided buffer.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.MultiPartForm.StringFormElement">
            <inheritdoc />
            <summary>
            Represents a string in a multipart form
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.StringFormElement.Value">
            <summary>
            Concrete content-type of the file. Can be omitted
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.StringFormElement.Disposition">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.StringFormElement.ContentType">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.StringFormElement.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Initializes a new FileValue to be used in a <see cref="T:Innoactive.Hub.SDK.MultiPartForm"/> given both the actual byte contents
            of the file (<paramref name="data"/>) as well as the file's name <paramref name="filename"/>. Also allows
            providing the specific type of file via the <paramref name="contentType"/> parameter.
            </summary>
            <param name="key">the input's (unique) key / form input name</param>
            <param name="data">the file's byte contents</param>
            <param name="filename">the file's name</param>
            <param name="contentType">the file's content-encoding / content-type, e.g. application/octet-stream or image/jpeg</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.StringFormElement.AddData(Innoactive.Hub.SDK.MultiPartForm.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.MultiPartForm.FileFormElement">
            <inheritdoc />
            <summary>
            Represents a file in a multipart form
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.Data">
            <summary>
            The File's contents as bytes
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.Filename">
            <summary>
            The file's name
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.ContentType">
            <summary>
            Concrete content-type of the file. Can be omitted
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.Disposition">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.#ctor(System.String,System.Byte[],System.String,System.String)">
            <inheritdoc />
            <summary>
            Initializes a new FileValue to be used in a <see cref="T:Innoactive.Hub.SDK.MultiPartForm"/> given both the actual byte contents
            of the file (<paramref name="data"/>) as well as the file's name <paramref name="filename"/>. Also allows
            providing the specific type of file via the <paramref name="contentType"/> parameter.
            </summary>
            <param name="key">the input's (unique) key / form input name</param>
            <param name="data">the file's byte contents</param>
            <param name="filename">the file's name</param>
            <param name="contentType">the file's content-encoding / content-type, e.g. application/octet-stream or image/jpeg</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.FileFormElement.AddData(Innoactive.Hub.SDK.MultiPartForm.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="F:Innoactive.Hub.SDK.MultiPartForm.boundary">
            <summary>
            The boundary separating each form element in a multipart form
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.MultiPartForm.ContentType">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.#ctor">
            <inheritdoc />
             <summary>
             </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.AddFile(System.String,System.Byte[])">
            <summary>
            Adds a file to the <see cref="T:Innoactive.Hub.SDK.MultiPartForm"/>. A name for the file will be automatically generated.
            The file will be sent with Content-Type "application/octet-stream".
            </summary>
            <param name="key">the key under which the file should be available on the server</param>
            <param name="fileData">the file's byte contents</param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.AddFile(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Adds a file to the <see cref="T:Innoactive.Hub.SDK.MultiPartForm"/> with the given <paramref name="filename"/> and
            <paramref name="contentType"/>. The file's contents are to be provided as bytes via <paramref name="fileData"/>
            </summary>
            <param name="key">the key under which the file should be available on the server</param>
            <param name="fileData">the file's byte contents</param>
            <param name="filename">the file's name</param>
            <param name="contentType">the file's actual content type, can be e.g. "application/octet-stream" or "image/jpeg". </param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.AddData(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.MultiPartForm.GetEncodedFormData(System.Text.Encoding)">
            <inheritdoc />
            <summary>
            Returns all data that is currently present in this form as a string representation suitable to be sent as
            the body of a Http (POST) request, encoded with the given encoding. <see href="https://tools.ietf.org/html/rfc2388"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.SDK.UrlEncodedForm">
            <inheritdoc />
            <summary>
            Basic implementation of an HTML form using url-encoding
            <seealso href="https://www.w3.org/TR/html401/interact/forms.html#didx-applicationx-www-form-urlencoded"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.UrlEncodedForm.StringFormElement">
            <inheritdoc />
            <summary>
            Represents a string value in an <see cref="T:Innoactive.Hub.SDK.HtmlForm"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.UrlEncodedForm.StringFormElement.Value">
            <summary>
            The form input's string value
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.UrlEncodedForm.StringFormElement.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new form element for text data with the given <paramref name="key"/> and string <paramref name="value"/>
            </summary>
            <param name="key">the input's (unique) key / form input name</param>
            <param name="value">the form input's value</param>
        </member>
        <member name="P:Innoactive.Hub.SDK.UrlEncodedForm.ContentType">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.UrlEncodedForm.GetEncodedFormData(System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.UrlEncodedForm.AddData(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="E:Innoactive.Hub.SDK.HttpRequest.OnHttpRequestException">
            <inheritdoc />
        </member>
        <member name="E:Innoactive.Hub.SDK.HttpRequest.HttpRequestException">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.Url">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.HttpProvider">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.AuthProvider">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.SerializationProvider">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.RetryOnAuthFailure">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.Method">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.Headers">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.BinaryData">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.HasAuthorization">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.OAuthToken">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.BasicAuth">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequest.HttpClient">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.SetData``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.AsJson``1">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.AsBinary">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.AsString">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.AsStream">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.UnwrapResponseAs``1">
            <summary>
            Returns a task that calls GetResponse upon execution and will return
            the unwrapped result of the operation as a result in the OnFinished handler.
            Any occurring request exception will be forwarded
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.GetResponse``1">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequest.HandleError(System.Exception)">
            <summary>
            handle error: forward to HttpClient's ExceptionObserver if one is registered
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.HttpRequestBuilder">
            <summary>
            Neat little helper to easily build up Http Requests. Makes use of the Builder pattern.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.HttpRequestBuilder.Request">
            <summary>
            Returns the actually built Request from all the options and data passed to the builder previously
            </summary>
            <exception cref="T:Innoactive.Hub.SDK.Exceptions.HttpRequestConfigurationException">Exception thrown when conflicting options / data have been provided</exception>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.#ctor(System.String,Innoactive.Hub.SDK.ERequestMethod)">
            <summary>
            Main constructor for request builder. Requires a base URI to start from (<paramref name="requestUrl"/>).
            </summary>
            <param name="requestUrl">the base url for the request, uniquely identifying a resource</param>
            <param name="requestMethod">modifies the used HTTP method</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AppendUrl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddHeader(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddOAuthToken(Innoactive.Hub.SDK.OAuth2Token)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddBasicAuth(Innoactive.Hub.SDK.BasicAuth)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddBasicAuth(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddBinaryData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddData``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddFormData(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddForm(Innoactive.Hub.SDK.HtmlForm)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.UsingMethod(Innoactive.Hub.SDK.ERequestMethod)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.UsingAuthProvider(Innoactive.Hub.SDK.IAuthProvider)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.UsingHttpProvider(Innoactive.Hub.SDK.IHttpProvider)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.UsingSerializationProvider(Innoactive.Hub.SDK.ISerializationProvider)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.UsingHttpClient(Innoactive.Hub.SDK.IHttpClient)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddQueryParam(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddOptions(Innoactive.Hub.Client.SearchOptions)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddOptions(Innoactive.Hub.Client.PaginationOptions)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpRequestBuilder.AddOptions(Innoactive.Hub.Client.OrderingOptions)">
            <inheritdoc />
        </member>
        <member name="E:Innoactive.Hub.SDK.IHttpRequest.OnHttpRequestException">
            <summary>
            Event that is emitted when this HttpRequest encounters an error
            </summary>
        </member>
        <member name="E:Innoactive.Hub.SDK.IHttpRequest.HttpRequestException">
            <summary>
            Event that is emitted when this HttpRequest encounters an error
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.Url">
            <summary>
            URL this request points to
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.SerializationProvider">
            <summary>
            The serialization provider used to serialize / deserialize request data and responses
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.AuthProvider">
            <summary>
            The authentication and authorization provider used to authenticate the request before running it
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.HttpProvider">
            <summary>
            The http provider used to actually execute the request and get it's response
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.Method">
            <summary>
            Request method used for this request
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.Headers">
            <summary>
            Getter / Setter for any headers
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.BinaryData">
            <summary>
            Any (binary) data that should be sent along with the request
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.AsString">
            <summary>
            Triggers execution of this request, expecting a string as the result of the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.AsBinary">
            <summary>
            Triggers execution of this request, expecting a json string which will be tried to parse as the specified type as the result of the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.SetData``1(``0)">
            <summary>
            Allows setting custom request body data that will be serialized automatically
            using the given <see cref="P:Innoactive.Hub.SDK.IHttpRequest.SerializationProvider"/>
            </summary>
            <typeparam name="T">the type of the data to be sent along with the request</typeparam>
            <param name="data"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.AsStream">
            <summary>
            Triggers execution of this request, expecting a json string which will be tried to parse as the specified type as the result of the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.AsJson``1">
            <summary>
            Triggers execution of this request, expecting a json string which will be tried to parse as the specified type as the result of the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequest.GetResponse``1">
            <summary>
            Starts fetching the response corresponding to this request
            will be resolved with the actual Response object in the OnFinished handler
            </summary>
            <returns></returns>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpRequest.HasAuthorization">
            <summary>
            Whether or not this Request already has authentication credentials set
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddData``1(``0)">
            <summary>
            Adds arbitrary data to the HttpRequest.
            If AddData is used, the HttpRequest is considered to be a CustomData request,
            and cannot be combined with data from AAddFormData or AddMultiFormXYZ.
            Can only be called once per builder.
            </summary>
            <param name="data">Data that will be added to the HttpRequest</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddFormData(System.String,System.String)">
            <summary>
            Add a form entry to the Request's <see cref="T:Innoactive.Hub.SDK.HtmlForm"/>.
            If no HtmlForm exists yet, a default form will be created.
            If AddFormData is used, the HttpRequest is considered to be a Form request,
            and cannot be combined with data from AddBinaryData.
            </summary>
            <param name="name">name of the form entry</param>
            <param name="value">value of the form entry</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddForm(Innoactive.Hub.SDK.HtmlForm)">
            <summary>
            Adds an entire HtmlForm's data to the request in order to be sent along.
            Following calls to <see cref="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddFormData(System.String,System.String)"/> will be forwarded to the passed HtmlForm.
            If AddForm is used, the HttpRequest is considered to be a Form request,
            and cannot be combined with data from AddBinaryData.
            </summary>
            <param name="form">the <seealso cref="T:Innoactive.Hub.SDK.HtmlForm"/> that contains data to be sent along with the request</param>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddOptions(Innoactive.Hub.Client.SearchOptions)">
            <summary>
            Adds SearchOptions to the HTTPS request if provided.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddOptions(Innoactive.Hub.Client.PaginationOptions)">
            <summary>
            Adds PaginationOptions to the HTTPS request if provided.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.IHttpRequestBuilder`1.AddOptions(Innoactive.Hub.Client.OrderingOptions)">
            <summary>
            Adds OrderingOptions to the HTTPS request if provided.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Initializes a new HttpResponse instance with the given serialization provider, headers and status code
            </summary>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.IO.Stream)">
            <summary>
            Initializes a new HttpResponse instance with the given serialization provider, headers and status code
            </summary>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
            <param name="dataStream"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(Innoactive.Hub.SDK.ISerializationProvider,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Initializes a new HttpResponse instance with the given serialization provider, headers and status code
            </summary>
            <param name="serializationProvider">The serialization provider interface to be used to deserialize incoming structured data</param>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(Innoactive.Hub.SDK.ISerializationProvider,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.IO.Stream)">
            <summary>
            Create a new HttpResponse from an existing Unity WWW Object
            </summary>
            <param name="serializationProvider">The serialization provider interface to be used to deserialize incoming structured data</param>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
            <param name="responseStream"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(Innoactive.Hub.SDK.IHttpClient,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.IO.Stream)">
            <summary>
            Constructor allowing to pass in a httpClient which is used to activate any ActiveRecords contained in the response
            </summary>
            <param name="httpClient"></param>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
            <param name="responseStream"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(Innoactive.Hub.SDK.ISerializationProvider,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Byte[])">
            <summary>
            Create a new HttpResponse from an existing Unity WWW Object
            </summary>
            <param name="serializationProvider">The serialization provider interface to be used to deserialize incoming structured data</param>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
            <param name="responseData"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.#ctor(Innoactive.Hub.SDK.IHttpClient,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Byte[])">
            <summary>
            Constructor allowing to pass in a httpClient which is used to activate any ActiveRecords contained in the response
            </summary>
            <param name="httpClient"></param>
            <param name="responseHeaders"></param>
            <param name="responseStatusCode"></param>
            <param name="responseData"></param>
        </member>
        <member name="M:Innoactive.Hub.SDK.HttpResponse`1.DecodeResponseStream(System.IO.Stream)">
            <summary>
            Decode the response, i.e. make sure the content's encoding is removed so it is readable again
            </summary>
            <param name="responseStream"></param>
        </member>
        <member name="P:Innoactive.Hub.SDK.IHttpResponse`1.SerializationProvider">
            <summary>
            The serialization provider used to serialize / deserialize request data and responses
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.ChunkedFileHttpUploader">
            <summary>
            Handles uploading of larger files by utilizing chunked uploads.
            After configuration, the uploader allows creating a task that performs
            the chunked uploading.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.ChunkedFileHttpUploader.AbortHandler">
            <summary>
            Helper class that, on dispose, also disposes all its sub-disposables.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.ChunkedFileHttpUploader.confirmationRequestProgressScale">
            <summary>
            Relative influence of the final commit message (without data payload)
            on the overall progress. The initial data packages provide progress based
            on the number of transmitted bytes, but the final commit requires a constant
            offset specified by this variable.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.FileData">
            <summary>
            Data stream that provides the contents of the file to upload.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.FileFieldName">
            <summary>
            Field name of the HttpRequest that stores the chunk byte data.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.BaseUrl">
            <summary>
            Base Url endpoint to use for the individual chunked upload <see cref="T:Innoactive.Hub.SDK.HttpRequest"/>s.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.HttpClient">
            <summary>
            <see cref="T:Innoactive.Hub.SDK.IHttpClient"/> to use to build the individual chunked upload <see cref="T:Innoactive.Hub.SDK.HttpRequest"/>s.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.Filename">
            <summary>
            Filename that will be specified during uploading.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.FileContentType">
            <summary>
            Mime-type specification of the file content type;
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.ChunkedFileHttpUploader.ChunkSize">
            <summary>
            Chunk size that determines the size of data to send per chunk.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.ChunkedFileHttpUploader.CreateUploadTask">
            <summary>
            Creates the task that performs the actual file upload. On success, the task
            will return a string representing the file url at which the uploaded file
            can be retrieved.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.IActiveRemoteRecord.HttpClient">
            <summary>
            The http client used to modify the active record on the remote machine
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Experimental.MediaStream">
            <summary>
            Class containing data for video streams.
            This class is marked as experimental. It may not work as expected and can change a in the future without previous deprecation.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Experimental.MediaStream.Id">
            <summary>
            Unique identifier for the stream object.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Experimental.MediaStream.UserURL">
            <summary>
            URL returning the user owning this stream object.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Experimental.MediaStream.SendURL">
            <summary>
            URL defining where to send the stream.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Experimental.MediaStream.ReceiveURL">
            <summary>
            URL defining where to get the stream.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Experimental.MediaStream.IsLive">
            <summary>
            Bool indicating if the stream is currently active.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Experimental.MediaStreamPage">
            <summary>
            <see cref="T:Innoactive.Hub.SDK.Models.Page`1"/> of <see cref="T:Innoactive.Hub.SDK.Models.Experimental.MediaStream"/> objects.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Experimental.MediaStreamPage.Next">
            <summary>
            Task to get the next page.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Experimental.MediaStreamPage.Previous">
            <summary>
            Task to get the previous page.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Model">
            <summary>
            Backend structure for a model, i.e. a 3D asset.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Id">
            <summary>
            HubId of the model.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Tags">
            <summary>
            List of tags assigned to the model in the Hub backend.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Name">
            <summary>
            Name assigned to the model in the Hub backend.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Upload">
            <summary>
            <see cref="P:Innoactive.Hub.SDK.Models.Model.Upload"/> data containing the file url where the model file can be downloaded from.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Status">
            <summary>
            Status of the model upload. Possible values are
            pen (pending), pro (processing in progress), fin (finished, model available),
            warn (warning), err (error).
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Materials">
            <summary>
            List of <see cref="T:Innoactive.Hub.SDK.Models.Material"/>s assigned to the model in the Hub backend.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.IsPartial">
            <summary>
            Indicates if this is a partial model, i.e. a model that is not a meaningful
            standalone entity, but part of a larger construct.
            Such models will not be listed in the backend's 3D asset list.
            Also, they may be deleted in the backend if they are not referenced by
            other entities anymore.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.scale">
            <summary>
            Scale of the model that should be applied when importing the meshes.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Model.Scale">
            <summary>
            Scale of the model that should be applied when importing the meshes.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.Download">
            <summary>
            Create a task that downloads the model file data.
            Requires <see cref="T:Innoactive.Hub.SDK.HttpClient"/> to be set before calling it.
            </summary>
            <exception cref="T:Innoactive.Hub.Communication.Exception.MissingReferenceException">Thrown if HttpClient is null.</exception>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.DownloadNormalMap">
            <summary>
            Create a task that downloads the normal map data.
            Requires <see cref="T:Innoactive.Hub.SDK.HttpClient"/> to be set before calling it.
            </summary>
            <exception cref="T:Innoactive.Hub.Communication.Exception.MissingReferenceException">Thrown if HttpClient is null.</exception>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.DownloadAlbedoMap">
            <summary>
            Create a task that downloads the albedo map data.
            Requires <see cref="T:Innoactive.Hub.SDK.HttpClient"/> to be set before calling it.
            </summary>
            <exception cref="T:Innoactive.Hub.Communication.Exception.MissingReferenceException">Thrown if HttpClient is null.</exception>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.DownloadMap(System.String,System.Int32)">
            <summary>
            Create a task that downloads the map data of the map type <paramref name="mapName"/>
            for the material with index <paramref name="materialIndex"/>.
            The task will provide a null result if no map is specified for <paramref name="mapName"/>
            Requires <see cref="T:Innoactive.Hub.SDK.HttpClient"/> to be set before calling it.
            </summary>
            <exception cref="T:Innoactive.Hub.Communication.Exception.MissingReferenceException">Thrown if HttpClient is null.</exception>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.GetMap(System.String,System.Int32)">
            <summary>
            Returns the map of type <paramref name="mapName"/> from the material <paramref name="materialIndex"/>.
            Will return null if the material index is invalid, or if the map type doesn't exist.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Model.ToString">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Upload">
            <summary>
            Serialization protocol class for upload info that specifies a file url.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Color">
            <summary>
            Simple color class that can be extended by an implicit operator to 
            be converted to the actual Color type of an engine
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Map">
            <summary>
            Serialization protocol class that specifies a texture map of a <see cref="T:Innoactive.Hub.SDK.Models.Model"/>'s <see cref="T:Innoactive.Hub.SDK.Models.Material"/>.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Map.Name">
            <summary>
            Name assigned to this texture map.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Map.Texture">
            <summary>
            URL where the texture file can be downloaded from.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Map.MaterialId">
            <summary>
            Id of the material this map is attached to.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Map.MapType">
            <summary>
            String specifying the map type.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Map.DominantColor">
            <summary>
            Dominant color of the map, i.e. an estimate for the average color impression.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Map.ToString">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Material">
            <summary>
            Serialization protocol class that specifies a <see cref="T:Innoactive.Hub.SDK.Models.Model"/>'s  material.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Material.Id">
            <summary>
            HubId of the material.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.Material.Maps">
            <summary>
            List of texture maps attached to this material.
            The type of maps are identified by <see cref="P:Innoactive.Hub.SDK.Models.Map.MapType"/>.
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_ALBEDO"/>
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_EMISSIVE"/>
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_METALLIC"/>
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_NORMAL"/>
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_OCCLUSION"/>
            <seealso cref="F:Innoactive.Hub.SDK.Models.Model.MAPTYPE_ROUGHNESS"/>
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.Material.ToString">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.ModelScale">
            <summary>
            Helper class to specify a <see cref="T:Innoactive.Hub.SDK.Models.Model"/>'s scale.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Image">
            <summary>
            Model class for Images.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Image.DistortionType">
            <summary>
            Defines how the image is distorted.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Image.StereoType">
            <summary>
            Defines if the image is mono or composed of multiple, for instance for different eyes.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Permission">
            <summary>
            Permission the user has in the Hub backend.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Permission.id">
            <summary>
            Id of the permission.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Permission.name">
            <summary>
            Pretty name of the permission.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Permission.codename">
            <summary>
            Name of the permission.
            Use this to search a specific permission.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Permission.contentTypeId">
            <summary>
            Id in the backend which references an internal model.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Space.autoSaveTag">
            <summary>
            Tag that is used for spaces that have been saved automatically,
            e.g. when switching spaces.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Space.manualSaveTag">
            <summary>
            Tag that is used for spaces that are saved by an explicit user request.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.SpaceList">
            <summary>
            SceneInfo class containing general info about scenes
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.UserInfo">
            <summary>
            UserInfo class used for the response of the
            get user info request
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.UserInfo.Name">
            <summary>
            shortcut to fullname
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.UserPermissions">
            <summary>
            Model class for User Permissions.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.UserPermissions.PermissionAction">
            <summary>
            Defines the type of permission.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserPermissions.PermissionAction.Unknown">
            <summary>
            Unknown permission.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserPermissions.PermissionAction.View">
            <summary>
            Read-only.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserPermissions.PermissionAction.Change">
            <summary>
            Full access.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.UserPermissions.UserID">
            <summary>
            Hub ID of the user to whom the permissions will be applied.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.UserPermissions.ActionString">
            <summary>
            Type of permission in string.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.SDK.Models.UserPermissions.Action">
            <summary>
            Type of permission.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.SDK.Models.UserPermissions.ToString">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.UserSettings">
            <summary>
            Settings the user can set globally for all Hub applications.
            They are only applied on items the user spawns and cannot be used by other users.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.gravityEnabledOnSpawn">
            <summary>
            If true, assets spawned by the user from the menu will have gravity and fall to the ground.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.adaptObjectScaleOnSpawn">
            <summary>
            If set to true, the scale of spawned objects by the user get clamped to a predefined region to avoid too large or too small items.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.showSpeechBubble">
            <summary>
            If set to true, a speech bubble is rendered over other user's head while their microphone registers sound.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.lockObjectOnSpawn">
            <summary>
            If set to true, all objects spawned by the user will be locked in place and require a manual unlock.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.basicShapeColor">
            <summary>
            Defines the color basic shapes have when spawned by the user.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.objectGrabMode">
            <summary>
            Defines how the player grabs objects spawned from the menu.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.pencilColor">
            <summary>
            Defines the default color of the pencil after the user spawned it from the menu.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.UserSettings.toolGrabMode">
            <summary>
            Defines how the user grabs tools.
            This is not being used yet because no definition of tools exist.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Video">
            <summary>
            VideoInfo class containing general info about videos
            </summary>
            
        </member>
        <member name="T:Innoactive.Hub.SDK.Models.Video.EType">
            <summary>
            Type of the video (2d, 360°, 3d, ...)
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.Unknown">
            <summary>
            unknown video type
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.Default">
            <summary>
            standard 2d video
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.ThreeSixty">
            <summary>
            standard monoscopic, equirectangular 360° video
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.ThreeDStereoTopBottom">
            <summary>
            stereoscopic 360° video (3d video), images aligned top to bottom
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.ThreeDStereoBottomTop">
            <summary>
            stereoscopic 360° video (3d video), images aligned bottom to top
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.ThreeDStereoLeftRight">
            <summary>
            stereoscopic 360° video (3d video), images aligned left to right
            </summary>
        </member>
        <member name="F:Innoactive.Hub.SDK.Models.Video.EType.ThreeDStereoRightLeft">
            <summary>
            stereoscopic 360° video (3d video), images aligned right to left
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.BaseCacheBackend`1">
            <inheritdoc />
            <summary>
            Abstract base implementation of a caching backend. Provides housekeeping tasks like
            cleaning out expired items automatically
            </summary>
            <typeparam name="TCacheValue"></typeparam>
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.PerformHouseKeeping">
            <summary>
            Takes care of cleaning up items in the cache that are e.g. outdated, surpass a certain size or are 
            eligible for cleaning in any other aspect.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.RemoveExpiredCacheItems">
            <summary>
            Helper function removing all expired / outdated items from the cache
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.RemoveOldItemsToRespectMaximumCacheSize">
            <summary>
            Helper function taking care of housekeeping and ensuring that the cache never exceeds the <seealso cref="P:Innoactive.Hub.Cache.BaseCacheBackend`1.MaximumCacheSizeBytes"/>
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.Cache.BaseCacheBackend`1.Name">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.Cache.BaseCacheBackend`1.MaximumCacheSizeBytes">
            <inheritdoc />
        </member>
        <member name="P:Innoactive.Hub.Cache.BaseCacheBackend`1.CurrentCacheSizeBytes">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Add(Innoactive.Hub.Cache.ICacheItem{`0})">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.AddInternal(Innoactive.Hub.Cache.ICacheItem{`0})">
            <summary>
            Add the given <paramref name="cacheItem"/> to this cache's data structure
            </summary>
            <param name="cacheItem">the cacheitem to be stored</param>
            <returns>whether or not the cacheitem has been successfully stored</returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.GetCacheItem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Put(Innoactive.Hub.Cache.ICacheItem{`0})">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Boot">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BaseCacheBackend`1.Shutdown">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Cache.BinaryCacheValueSerializer">
            <summary>
            Implementation of the <seealso cref="T:Innoactive.Hub.Cache.ICacheValueSerializer"/> contract relying on .NET's builtin
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for serialization / deserialization
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.BinaryCacheValueSerializer.binaryFormatter">
            <summary>
            The instance of the <seealso cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> that'll be used for serializing / deserializing
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.BinaryCacheValueSerializer.Serialize``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.BinaryCacheValueSerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.BaseCacheControlHeaderParser`1">
            <inheritdoc />
            <summary>
            Base implementation of a <see cref="T:Innoactive.Hub.Cache.CacheHeaderParsers.IHeaderParser" /> used for the Cache-Control header's value
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.BaseCacheControlHeaderParser`1.ParseHeaderValue(System.String)">
            <summary>
            Parse the given <paramref name="input"/> header value returning the typed result <typeparamref name="T"/>
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.BaseCacheControlHeaderParser`1.Parse(System.Net.WebHeaderCollection)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.MaxAgeCacheControlHeaderParser">
            <inheritdoc />
            <summary>
            Reads the field "max-age" from the CacheControl Header and saves the found Data to a CacheHeaderReader
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Expiration"/> 
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.NoCacheCacheControlHeaderParser">
            <inheritdoc />
            <summary>
            no-cache means that the cached resource has to be validated at each request.
            Only if it is validated by the server through an 304 NotModified response the Cache will be used.
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Cacheability"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.NoStoreCacheControlHeaderParser">
            <inheritdoc />
            <summary>
            The cache should not cache this element.
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Other"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.PrivateCacheControlHeaderParser">
            <inheritdoc />
            <summary>
            If the Cache-Control header contains the word private, the response may only be cached for that specific user,
            i.e. no other user may ever receive this cached response. The opposite of this is "public" which means the response
            can be cached by anyone
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Cacheability"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.SMaxAgeCacheControlHeaderParser">
            <inheritdoc />
            <summary>
            s-maxage overwrites max-age but only for public caches!
            ref https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Cache-Control
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.PrivateCache">
            <summary>
            If PrivateCache is set to true, then the returned response can only be cached by caches that respect the current user context, i.e. the cached response
            is only valid for the current user and noone else. Public responses can always be cached, Private not so much.
            <seealso href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en#public_vs_private"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.NoCache">
            <summary>
            If NoCache is set to true, then the returned response can't be used to satisfy any subsequent request without prior validation.
            However, we can use the cached response as long as the validation yields a result indicating the resource has not been modified (HTTP Status Code 304)
            <seealso href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en#no-cache_and_no-store"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.NoStore">
            <summary>
            If NoStore is set to true, the response may not be cached - ever.
            <seealso href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en#no-cache_and_no-store"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.LastModified">
            <summary>
            Date and Time of the last known modification of the requested resource
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.ExpirationDateTimeUtc">
            <summary>
            The time at which the response is considered to be stale and needs to be refetched from the server
            Can be set either via an Expires-Header or the max-age and s-maxage settings
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.MaxAgeSeconds">
            <summary>
            Maximum age in seconds that the response may be cached forThis value will be respected when 
            calculating the <seealso cref="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.ExpirationDateTimeUtc"/>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Expiration"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.SMaxAgeSeconds">
            <summary>
            Maximum age in seconds specifically targeting public caches (ignored by private ones). This value will be respected when 
            calculating the <seealso cref="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.ExpirationDateTimeUtc"/>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Expiration"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.ETag">
            <summary>
            Entity Tag that uniquely identifies a certain version of a resource
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
            <summary>
            Reads through the Headers of a HTTP Response and analyzes its data.
            </summary>
            <param name="headers"> can Dictionary and also WebheaderCollection</param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.#ctor(System.Net.WebHeaderCollection)">
            <summary>
            Reads through the Headers of a HTTP Response and analyzes its data.
            </summary>
            <param name="headers"> can Dictionary and also WebheaderCollection</param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.CacheHeaders.ParseCacheHeaders(System.Net.WebHeaderCollection)">
            <summary>
            Parses the given <paramref name="headers"/> dictionary to identify any values relevant for http caching.
            </summary>
            <param name="headers"></param>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.ETagHeaderParser">
            <inheritdoc />
            <summary>
            Reads the ETag from the Headers of a given CacheHeaderReader.
            Example:
            ETag: "34aa387-d-1568eb00"
            If an Expires header is specified also, it will not send a Request until Expires is outdated.
            Read more about the ETag: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag
            and also about its corresponding If-None-Match header
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.ExpiresHeaderParser">
            <inheritdoc />
            <summary>
            Reads the Expires Header from the Headers of a CacheHeaderReader.
            Examples:
            Expires: Wed, 21 Oct 2015 07:28:00 GMT
            Expires can stop an ETag from being validated.
            Expires will be overwritten by Max-Age or SMax-Age in the CacheControl Header
            Used Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.IHeaderParser`1">
            <summary>
            HeaderParser contract that identifies relevant data in the provided HTTP Headers
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheHeaderParsers.IHeaderParser`1.Parse(System.Net.WebHeaderCollection)">
            <summary>
            Parses the information provided in <paramref name="headers"/> and returns the associated value of type <typeparamref name="T"/>
            </summary>
            <param name="headers"></param>
        </member>
        <member name="T:Innoactive.Hub.Cache.CacheHeaderParsers.LastModifiedHeaderParser">
            <inheritdoc />
            <summary>
            Reads the LastModified header
            ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified
            format is DateTime
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.ECacheValidation.Freshness">
            <summary>
            Uses Freshness to validate whether a cached item is still valid (e.g. expiration date has not been reached yet)
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.ECacheValidation.Validation">
            <summary>
            Uses validation on e.g. the server side to make sure a cached item is still valid. The cache cannot perform this operation independently
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.#ctor(System.String,`0,Innoactive.Hub.Cache.ECacheValidation,System.DateTime)">
            <summary>
            Constructor for distinguishing different types of caching strategies (<seealso cref="T:Innoactive.Hub.Cache.ECacheValidation"/> in conjunction
            with the passed timestamp. In the case of <see cref="F:Innoactive.Hub.Cache.ECacheValidation.Freshness"/>, the passed timestamp will be used
            to allow the cache to immediately detect whether the cached item is still valid or already expired. In the case of
            <see cref="F:Innoactive.Hub.Cache.ECacheValidation.Validation"/>, the given timestamp will be sent to a validation service that checks whether
            the cached item is still valid or needs to be updated.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheValidation"></param>
            <param name="dateTime"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.#ctor(System.String,`0,Innoactive.Hub.Cache.ETag)">
            <summary>
            Constructor for <see cref="F:Innoactive.Hub.Cache.ECacheValidation.Validation"/> cache item used in conjunction with an ETag
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="eTag"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.WithExpirationDate(System.String,`0,System.DateTime)">
            <summary>
            Returns a new CacheItem with an expiration date and time set which will be used for cache validation
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.WithLastModificationDate(System.String,`0,System.DateTime)">
            <summary>
            Returns a new CacheItem with a last modification date and time set which will be used for cache validation
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.WithETag(System.String,`0,Innoactive.Hub.Cache.ETag)">
            <summary>
            Returns a new CacheItem with an eTag set which will be used for cache validation
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for Deserialization, <seealso cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.CacheItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:Innoactive.Hub.Cache.DiskEncryptionKeyProvider.#ctor(System.String)">
            <summary>
            Generates a new instance of the <see cref="T:Innoactive.Hub.Cache.DiskEncryptionKeyProvider"/> by trying to load
            the encryption key located in the given <paramref name="encryptionKeyDirectoryPath"/>. If
            no key can be found in the given location, a new encryption key will automatically be provided.
            </summary>
            <param name="encryptionKeyDirectoryPath"></param>
        </member>
        <member name="T:Innoactive.Hub.Cache.EncryptedCache`1">
            <inheritdoc />
            <summary>
            Decorator pattern that allows encrypting any given <seealso cref="T:Innoactive.Hub.Cache.ICacheBackend`1" />
            </summary>
            <typeparam name="TCacheValue"></typeparam>
        </member>
        <member name="T:Innoactive.Hub.Cache.EncryptionKey">
            <summary>
            The key required to encrypt / decrypt files
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.InMemoryEncryptionKeyProvider.#ctor">
            <summary>
            Constructor without any encryption key passed, will generate a new, random encryption key automatically
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.ETag">
            <summary>
            Implementation of an Entity Tag, used for uniquely identifying revisions of resources e.g for caching.
            <seealso href="https://en.wikipedia.org/wiki/HTTP_ETag" />. The default ETag behaves like a Strong ETag,
            <see href="https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation" />
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.ETag.ETagValue">
            <summary>
            the actual etag value
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.StrongETag">
            <summary>
            Implementation of a strong ETag, <see href="https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation"/> for
            distinction to <seealso cref="T:Innoactive.Hub.Cache.WeakETag"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.WeakETag">
            <summary>
            Implementation of a weak ETag, <see href="https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation"/> for
            distinction to <seealso cref="T:Innoactive.Hub.Cache.StrongETag"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileCacheItem`1.CacheValueSerializer">
            <summary>
            Instance of an <seealso cref="T:Innoactive.Hub.Cache.ICacheValueSerializer"/> used to serialize the cached item's value when saving to disk
            and deserializing it again when reading from disk
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileCacheItem`1.Path">
            <summary>
            The path at which this cache item is stored on disk
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileCacheItem`1.LockSaveLoad">
            <summary>
            Monitor used for locking when saving / loading the cached file to prevent cross-thread problems
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileCacheItem`1.FileSizeBytes">
            <summary>
            The size of this file in bytes
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.Save">
            <summary>
            Saves this item to disk (if changed)
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.Load">
            <summary>
            Loads the item's value from disk
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.Dispose">
            <summary>
            Disposes the cached item, also taking care of deleting the related file
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.GetCachedItemFileStream">
            <returns>A stream with the contents of the cached item</returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.UpdateFileSize">
            <summary>
            Updates the file size of the stored cache item, thus allowing to access <see cref="P:Innoactive.Hub.Cache.FileCacheItem`1.FileSizeBytes"/>
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.GenerateFilename">
            <summary>
            Gets the filename for this cache item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.SanitizeFilename(System.String)">
            <summary>
            Makes sure that the given filename in question (<paramref name="filename"/> only contains
            characters that are valid in paths.
            </summary>
            <param name="filename">the filename to be sanitized</param>
            <returns>The sanitized filename, all invalid chars have been replaced with an underscore char (_)</returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.AssertPathIsValid">
            <summary>
            Helper function ensuring that the cached item's <seealso cref="P:Innoactive.Hub.Cache.FileCacheItem`1.Path"/> is valid
            </summary>
            <exception cref="T:Innoactive.Hub.Cache.InvalidCacheItemPathException">Raised when the <see cref="P:Innoactive.Hub.Cache.FileCacheItem`1.Path"/> is invalid</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileCacheItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <summary>
            Overrides <see cref="M:Innoactive.Hub.Cache.CacheItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> in order to not serialize the actual value
            since that is going to be stored on disk (<see cref="P:Innoactive.Hub.Cache.FileCacheItem`1.Path"/>)
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Innoactive.Hub.Cache.FileStreamCacheBackend">
            <summary>
            Specific overload of the <seealso cref="T:Innoactive.Hub.Cache.FileSystemCacheBackend`1"/> that caches entire streams
            to disk and allows to restore data as streams from disk again. Useful for caching entire, large files to disk.
            To do so, this caching backend makes use of <seealso cref="T:Innoactive.Hub.Cache.FileStreamCacheItem"/> instead of the default <seealso cref="T:Innoactive.Hub.Cache.FileCacheItem`1"/>
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.FileStreamCacheItem">
            <summary>
            Special implementation of <see cref="T:Innoactive.Hub.Cache.FileCacheItem`1"/> that allows to cache entire data streams to disk and
            restore them from there again
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileStreamCacheItem.Value">
            <summary>
            Value of this cached item as a stream. Be aware that whenever accesing it, the stream will be read from a temporary file
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileSystemCacheBackend`1.CachingRootPath">
            <summary>
            The root directory of the cache. All cached items will reside inside that folder
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.FileSystemCacheBackend`1.FileIndex">
            <summary>
            The file index used to get quick access to cached files
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.#ctor(System.String)">
            <summary>
            Default constructor requires the root path (<paramref name="cachingRootPath"/>) at which the cache will be created to be given
            </summary>
            <param name="cachingRootPath"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.#ctor(System.String,System.Int64)">
            <summary>
            Constructor requires the root path (<paramref name="cachingRootPath"/>) at which the cache will be created to be given
            and the maximum size the cache should be allocated to (<paramref name="maximumCacheSizeBytes"/>)
            </summary>
            <param name="cachingRootPath"></param>
            <param name="maximumCacheSizeBytes"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.GetIndexPath">
            <summary>
            Gets the absolute path to the index file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.CachingRootPathIsValid(System.String)">
            <summary>
            whether or not the given <paramref name="cachingRootPath"/> is a valid directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.RemoveOldItemsToRespectMaximumCacheSize">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.FileSystemCacheBackend`1.RemoveExpiredCacheItems">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Cache.UnsupportedCacheOperationException">
            <inheritdoc />
            <summary>
            Exception thrown whenever an operation is attempted on a cache that is unsupported by that cache instance
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.ICache`1">
            <inheritdoc />
            <summary>
            Main Caching interface implemented by any cache
            </summary>
            <typeparam name="TValue">The type of values that will be cached.</typeparam>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICache`1.Name">
            <summary>
            Name of this cache
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICache`1.MaximumCacheSizeBytes">
            <summary>
            the maximum allowed cache size in bytes. If this size is surpassed, the
            cache needs to remove some entries
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICache`1.CurrentCacheSizeBytes">
            <summary>
            The current size in bytes of this cache
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Add(Innoactive.Hub.Cache.ICacheItem{`0})">
            <summary>
            Add an <seealso cref="T:Innoactive.Hub.Cache.ICacheItem`1"/> to the cache. Will fail (and return false) if the item already exists in the cache. 
            If you want to overwrite a cached item, use <seealso cref="M:Innoactive.Hub.Cache.ICache`1.Put(Innoactive.Hub.Cache.ICacheItem{`0})"/> instead.
            </summary>
            <param name="item">The <seealso cref="T:Innoactive.Hub.Cache.ICacheItem`1"/> to be added to the cache.</param>
            <returns>true if the key was successfully added to the cache, false otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown if the provided <paramref name="item"/> is null</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Clear">
            <summary>
            Clears this cache, removing all items from the cache and underlying storage technologies (e.g. filesystem, memory, ...)
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Exists(System.String)">
            <summary>
            Determines whether a CacheItem exists for the given key in the cache.
            </summary>
            <param name="key">The key to check for in the cache.</param>
            <returns>Whether or not the specified <paramref name="key"/> exists in the cache.</returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Get(System.String)">
            <summary>
            Gets the cached value for the specified key (if available)
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The cached value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:Innoactive.Hub.Cache.CacheKeyNotFoundException">Thrown if no item exists in the cache for the given key</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.GetCacheItem(System.String)">
            <summary>
            Try getting the entire <seealso cref="T:Innoactive.Hub.Cache.ICacheItem`1"/> (cached value + metadata) from the cache.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <exception cref="T:Innoactive.Hub.Cache.CacheKeyNotFoundException">Thrown if no item exists in the cache for the given key</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Put(Innoactive.Hub.Cache.ICacheItem{`0})">
            <summary>
            Adds the specified <paramref name="item"/> to the cache, overwriting existing entries with the same key.
            </summary>
            <param name="item">The <see cref="T:Innoactive.Hub.Cache.ICacheItem`1"/> to be cached.</param>
            <exception cref="T:System.ArgumentException">Thrown if the provided <paramref name="item"/> is null</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Remove(System.String)">
            <summary>
            Tries to remove the cached item for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <exception cref="T:Innoactive.Hub.Cache.CacheKeyNotFoundException">Thrown if no item exists in the cache for the given key</exception>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Boot">
            <summary>
            Starts up the cache
            </summary>
            <remarks>Should be automatically called in the constructor</remarks>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICache`1.Shutdown">
            <summary>
            Shuts down the cache, releasing any resources allocated in memory, but not disposing any unamanged resources like e.g. files
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.ICacheBackend`1">
            <inheritdoc />
            <summary>
            Strategy pattern for caching, one implementation will exist for every caching backend (e.g. In-Memory-Cache, File-System-Cache, ...)
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.CreatedUtc">
            <summary>
            Gets the creation date of the cache item. This is the time at which the item has been added to the cache
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.ExpirationUtc">
            <summary>
            Date at which the item has been modified the last time
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.LastModifiedUtc">
            <summary>
            Date at which the item has been modified the last time
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.Key">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.ETag">
            <summary>
            Entity Tag  <seealso href="https://en.wikipedia.org/wiki/HTTP_ETag"/>
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheItem`1.Value">
            <summary>
            Gets the cache value.
            </summary>
            <value>The cache value.</value>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheItem`1.IsExpired">
            <summary>
            Gets a value indicating whether the item is logically expired or not.
            Depending on the cache vendor, the item might still live in the cache although
            according to the expiration mode and timeout, the item is already expired.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheItem`1.NeedsValidation">
            <summary>
            Whether or not this cached item needs to be revalidated (e.g. when using HTTP caching)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheItem`1.HasValidEtag">
            <summary>
            Whether or not the cached item has a valid entita tag <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheItem`1.HasValidLastModifiedDate">
            <summary>
            Whether or not the cached item's last modification date (<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified"/> is valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheItem`1.HasValidExpirationDate">
            <summary>
            Whether or not the cached item's expiration date is valid (<see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.Cache.ICacheValueSerializer">
            <summary>
            Contract used to serialize / deserialize cached values so they can be stored in memory-based caching layers
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheValueSerializer.Serialize``1(``0)">
            <summary>
            Serializes the given cached <paramref name="value"/> to a stream of bytes
            </summary>
            <typeparam name="TCacheValue">the type of the cached value</typeparam>
            <param name="value">the cached value to be serialized</param>
            <returns>the stream of bytes (serialized form of the cached value)</returns>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheValueSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the given bytestream <paramref name="serializedValueStream"/> to an instance of the given type <typeparamref name="TCacheValue"/>.
            </summary>
            <typeparam name="TCacheValue"></typeparam>
            <param name="serializedValueStream"></param>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.Cache.InMemoryCacheBackend`1">
            <inheritdoc />
        </member>
        <member name="F:Innoactive.Hub.Cache.InMemoryCacheBackend`1.isDisposed">
            <summary>
            Whether or not the in-memory cache has already been disposed
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.InMemoryCacheBackend`1.RemoveOldItemsToRespectMaximumCacheSize">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.InMemoryCacheBackend`1.RemoveExpiredCacheItems">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Cache.EncryptedStreamCacheItem`1.GetDefaultCacheValueSerializer">
            <summary>
            Gets the default implementation of <seealso cref="T:Innoactive.Hub.Cache.ICacheValueSerializer"/> to be used to serialize / deserialize cache values
            </summary>
            <returns>an implementation of <seealso cref="T:Innoactive.Hub.Cache.ICacheValueSerializer"/></returns>
        </member>
        <member name="T:Innoactive.Hub.Cache.ReadOnlyFileStream">
            <summary>
            Decorates a FileStream so one can only read from that filestream (no writing!)
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Cache.ICacheManager`1">
            <summary>
            This interface extends the <c>ICache</c> interface by some cache manager specific methods and events.
            </summary>
            <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
        </member>
        <member name="P:Innoactive.Hub.Cache.ICacheManager`1.CachingBackend">
            <summary>
            The Caching Backend currently used
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.ICacheManager`1.SetCachingBackend(Innoactive.Hub.Cache.ICacheBackend{`0})">
            <summary>
            Uses the given <paramref name="cachingBackend"/> instead of the currenlty used one
            </summary>
            <param name="cachingBackend"></param>
        </member>
        <member name="T:Innoactive.Hub.Cache.FileIndex`1.FileIndexLockedException">
            <inheritdoc />
            <summary>
            Exception thrown when the file index is already opened by someone else
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.FileIndex`1.lockSaveLoad">
            <summary>
            Monitor used for locking when saving / loading the index file to prevent cross-thread problems
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.FileIndex`1.indexPath">
            <summary>
            Path at which the index is stored
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.FileIndex`1.index">
            <summary>
            the actual index of cached items
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Cache.FileIndex`1.fileStream">
            <summary>
            The filestream that points to the opened index file
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.#ctor">
            <summary>
            Default constructor required for Json.NET
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Create new Index for storing FileInformation
            </summary>
            <param name="indexPath"></param>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.Finalize">
            <summary>
            Destructor taking care of releasing the opened index file stream
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.Load">
            <summary>
            Can throw Exceptions if IndexFile is corrupt or not existent.
            Clearing Cache should help then.
            Note: If you did not save before loading, you might loose data.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.LoadAndLockIndex">
            <summary>
            Opens up the index file, locking it for everyone else
            </summary>
            <remarks>Please make sure to call <seealso cref="M:Innoactive.Hub.Cache.FileIndex`1.CloseAndReleaseIndex"/> when you're done with the index</remarks>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.CloseAndReleaseIndex">
            <summary>
            Closes up the index file, freeing it up so that others can read / write from / to it again
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.Close">
            <summary>
            Closes all resources related to this file index (i.e. the index file itself and any other opened files).
            In contrast to <seealso cref="M:Innoactive.Hub.Cache.FileIndex`1.Dispose"/>, Close() does not delete any files!
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.Clear">
            <summary>
            Clears and deletes all items from the current index
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Cache.FileIndex`1.GetTotalSizeBytes">
            <summary>
            Returns the cumulated size of all cached files in the index
            </summary>
            <returns></returns>
        </member>
        <member name="T:Innoactive.Hub.Client.OrderingOptions">
            <summary>
            Options for <see cref="T:Innoactive.Hub.SDK.HubClient"/> requests to specify how items are ordered in a retrieved list.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Client.OrderingOptions.OrderingDirection">
            <summary>
            Specifies the direction of ordering (Ascending, Descending)
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Client.OrderingOptions.OrderingDirection.Descending">
            <summary>
            Descending Ordering, e.g. 9 to 1 (numerical) or Z to A (alphanumeric)
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Client.OrderingOptions.OrderingDirection.Ascending">
            <summary>
            Ascending Ordering, e.g. 1 to 9 (numerical) or A to Z (alphanumeric)
            </summary>
            <remarks>
            ascending needs to have value 1 to support casting the old boolean for ascending ordering to the enum
            orderAscending: true => 1 => OrderingDirection.Ascending
            </remarks>
        </member>
        <member name="P:Innoactive.Hub.Client.OrderingOptions.Ordering">
            <summary>
            Specifies the property in which the items should be ordered. By name, date etc.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.OrderingOptions.OrderAscending">
            <summary>
            Specifies if items in the retrieved list should be ordered ascending or descending.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.OrderingOptions.Direction">
            <summary>
            Specifies if items in the retrieved list should be ordered ascending or descending, <see cref="T:Innoactive.Hub.Client.OrderingOptions.OrderingDirection"/>.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Client.OrderingOptions.#ctor(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Innoactive.Hub.Client.OrderingOptions.#ctor(System.String,Innoactive.Hub.Client.OrderingOptions.OrderingDirection)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Client.PaginationOptions">
            <summary>
            Options for <see cref="T:Innoactive.Hub.SDK.HubClient"/> requests to specify which page of a larger list should be loaded.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Client.PaginationOptions.defaultPageSize">
            <summary>
            The default number of items retrieved per page.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Client.PaginationOptions.defaultPage">
            <summary>
            The default page that will be retrieved if not explicitly specified.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.PaginationOptions.PageSize">
            <summary>
            Number of items per page.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.PaginationOptions.Page">
            <summary>
            Index of the page that should be loaded.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Client.PaginationOptions.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Client.SearchOptions">
            <summary>
            Options for <see cref="T:Innoactive.Hub.SDK.HubClient"/> requests to specify which page of a larger list should be loaded.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.SearchOptions.SearchTags">
            <summary>
            Tags of items which should be retrieved.
            </summary>
        </member>
        <member name="P:Innoactive.Hub.Client.SearchOptions.SearchTerm">
            <summary>
            Search term for items which should be retrieved.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Client.SearchOptions.#ctor(System.Collections.Generic.ICollection{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Innoactive.Hub.Communication.Http.EndpointSchema">
            <summary>
            Wraps the EndpointSchema file received from the backend options request.
            </summary>
        </member>
        <member name="F:Innoactive.Hub.Communication.Http.EndpointSchema.Actions.Put">
            <summary>
             At the moment there is only put support from the backend.
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Communication.Http.EndpointSchemaFieldFactory.RegisterGenericCreator``1">
            <summary>
            Adds a generic creator for the class of type T to the creators list.
            It uses the correct key string based on the given endpointfield.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Communication.Http.EndpointSchemaFieldFactory.EndpointFieldCreator">
            <summary>
            Using an absctract creator allows to add specific creators later on.
            </summary>
        </member>
        <member name="T:Innoactive.Hub.Communication.Http.EndpointSchemaFieldFactory.GenericEndpointFieldCreator`1">
            <summary>
            Generic creator for any endpoindfield type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Innoactive.Hub.Helper.HashAlgorithmExtension.ComputeHashAsString(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Computes the hash of the given input <paramref name="buffer"/> and returns the hash's stringified version
            </summary>
            <param name="algorithm">the used hashing algorithm, <seealso cref="T:System.Security.Cryptography.HashAlgorithm"/></param>
            <param name="buffer">the input of bytes to be hashed</param>
            <returns>the hash as a stringified version</returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.HashAlgorithmExtension.ComputeHashAsString(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Computes a hash over the given string <paramref name="input"/>
            </summary>
            <param name="algorithm">the used hahsing algorithm, <seealso cref="T:System.Security.Cryptography.HashAlgorithm"/></param>
            <param name="input">the input string to be hashed</param>
            <returns>the hash as a stringified version</returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.HashAlgorithmExtension.GetMd5Hash(System.String)">
            <summary>
            Hashes the given input string using MD5. Returns the MD5 hash as its stringified version
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.HashAlgorithmExtension.GetMd5HashBytes(System.String)">
            <summary>
            Hashes the given input string using MD5. Returns the MD5 hash as its stringified version
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.CasingHelper.ToPascalCase(System.String)">
            <summary>
            converts the given string to pascal case.
            Code shamelessly copied from https://codereview.stackexchange.com/a/112775 
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.Streams.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            copies one stream into another.
            found here: https://stackoverflow.com/a/230141
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Innoactive.Hub.Helper.Streams.ConvertStreamToByteArray(System.IO.Stream)">
            <summary>
            Convert object to byteArray. Should be byte[], string or Stream 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Innoactive.Hub.Helper.Streams.WriteStreamToFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes the given <paramref name="dataStream"/> to the file located at <paramref name="filePath"/>
            </summary>
            <param name="dataStream">the stream of bytes to be saved</param>
            <param name="filePath">the path at which the <paramref name="dataStream"/>'s data should be saved</param>
            <param name="append">whether or not the <paramref name="dataStream"/>'s data should merely be appended to an existing file</param>
        </member>
        <member name="M:Innoactive.Hub.Helper.Streams.WriteBytesToFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Writes the given <paramref name="data"/> to the file located at <paramref name="filePath"/>
            </summary>
            <param name="data">the bytes to be saved</param>
            <param name="filePath">the path at which the <paramref name="data"/>'s data should be saved</param>
            <param name="append">whether or not the <paramref name="data"/>'s data should merely be appended to an existing file</param>
        </member>
        <member name="M:Innoactive.Hub.Helper.StreamExtensionMethods.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the contents of <paramref name="stream"/> to <paramref name="otherStream"/>
            </summary>
            <param name="stream"></param>
            <param name="otherStream"></param>
        </member>
        <member name="M:Innoactive.Hub.Helper.StreamExtensionMethods.ToArray(System.IO.Stream)">
            <summary>
            Returns the entire contents of the given <paramref name="stream"/> as a byte array.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="F:Innoactive.Hub.Helper.TemporaryFileHelper.Log">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:Innoactive.Hub.Helper.TemporaryFileHelper.DeleteDirectoryRecursively(System.String)">
            <summary>
            Delete the directory at the given path recursively (all of the contained files and folders) forgivingly. 
            Don't stop when a file couldn't be deleted but instead just throw a warning
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Innoactive.Hub.Helper.TemporaryFileHelper.RemoveTemporaryFilesInFolder(System.String)">
            <summary>
            Tries to remove all temporary files gathered under the given <paramref name="subfolderName"/> of Windows's temporary folder.
            </summary>
            <param name="subfolderName">the folder in which all temporary files should be removed</param>
        </member>
        <member name="M:Innoactive.Hub.Helper.TemporaryFileHelper.GetTemporaryFileNameInFolder(System.String)">
            <summary>
            Returns a path to a temporary file located in the given <paramref name="subfolderName"/> of Windows's temporary folder.
            </summary>
            <param name="subfolderName">the folder in which a temporary file is needed</param>
        </member>
        <member name="T:Innoactive.Hub.ContentEncoding.IdentityEncoder">
            <inheritdoc />
            <summary>
            An encoder that mimics the the identity function (i.e. no compression, nor modification)
            </summary>
        </member>
        <member name="T:Innoactive.Hub.ContentEncoding.GzipEncoder">
            <inheritdoc />
            <summary>
            Encoder implementation using Gzip (<seealso href="https://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77"/> for encoding / decoding data
            </summary>
        </member>
        <member name="T:Innoactive.Hub.ContentEncoding.IEncoder">
            <summary>
            Encode / decode data using specific encodings
            </summary>
        </member>
        <member name="M:Innoactive.Hub.ContentEncoding.IEncoder.Encode(System.IO.Stream)">
            <summary>
            Encodes the given bytestream (<paramref name="inputStream"/>)
            </summary>
            <param name="inputStream">the bytestream to encode</param>
            <returns>the encoded bytestream</returns>
        </member>
        <member name="M:Innoactive.Hub.ContentEncoding.IEncoder.EncodeData(System.Byte[])">
            <summary>
            Encodes the given bytes (<paramref name="inputData"/>
            </summary>
            <param name="inputData">the bytes to encode</param>
            <returns>the encoded bytes</returns>
        </member>
        <member name="M:Innoactive.Hub.ContentEncoding.IEncoder.Decode(System.IO.Stream)">
            <summary>
            Tries to decode the given bytestream (<paramref name="encodedStream"/>). 
            Be aware that decode will try to seek to the beginning of the decoded stream before returning it
            so it can be further processed.
            </summary>
            <param name="encodedStream">the bytestream to be decoded</param>
            <returns>the decoded bytestream</returns>
        </member>
        <member name="M:Innoactive.Hub.ContentEncoding.IEncoder.DecodeData(System.Byte[])">
            <summary>
            Tries to decode the given bytes (<paramref name="encodedData"/>)
            </summary>
            <param name="encodedData">the bytes to be decoded</param>
            <returns>the decoded bytes</returns>
        </member>
    </members>
</doc>
